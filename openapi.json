{
  "openapi": "3.0.3",
  "info": {
    "description": "APIs of the ecolytiq SaaS\n",
    "version": "v3",
    "title": "ecolytiq SaaS",
    "contact": {
      "email": "support@ecolytiq.com",
      "name": "ecolytiq GmbH",
      "url": "https://ecolytiq.com"
    },
    "termsOfService": "https://ecolytiq.com/imprint",
    "x-logo": {
      "url": "https://developer.ecolytiq.com/static/logo.png",
      "backgroundColor": "#132a38",
      "altText": "ecolytiq GmbH"
    }
  },
  "servers": [
    {
      "description": "ecolytiq API (Sandbox)",
      "url": "https://api.sandbox.arm.ecolytiq.network"
    }
  ],
  "tags": [
    {
      "name": "General Information",
      "description": "This document describes the API of the ecolytiq Sustainability-as-a-Service&reg; platform.\n\necolytiq has developed a method of assigning financial (bank) transactions with a CO<sub>2</sub> footprint, therefore, allowing financial institutions to inform their end customers about the ecological impact of their transactions. \nThe calculation is based on the amount of the (outgoing) transaction and a category of the transaction which are both components of various region-specific calculation models.\n\n## Basic Requirements\n\nTo use the ecolytiq platform a customer is required to have a working pair of client credentials consisting of a `client_id` and a `client_secret`.\nThose credentials are provided by ecolytiq after a contract is signed.\n\nThe customer is responsible for providing the client application that manages the integration of the ecolytiq services into their systems.\n\nCertain features may not be available to or necessary for all customers. \nHence, the set of enabled features is bound to a set of client credentials.\n\n## Information on Available and Enabled Features\n\nAs not all features may be relevant to all customers the feature set can vary for different client credentials.\nThe ecolytiq platform provides an [info API](#tag/Info-API) to get information about the features that are available (in general) and accessible/enabled (for the customer).\n\n## Processing of Financial Transactions\n\n### Transaction Enrichment\n\nThe core functionality is enriching the transactions with the ecological footprint (at present: CO<sub>2</sub>) related to the purchase. \nThis can be achieved by sending transactions to the [transaction API](#tags/Transaction-API). \n\nThe ecolytiq platform has the ability to immediately return the calculation result (\"synchronous processing\") or to only accept the transactions and schedule the calculations until a later point in time (\"asynchronous processing\").\nIn any case, the [result of the calculation](#operation/getTransactionsTransactions) can also be retrieved at a later point in time.\n\n### Refinement of Transactions\n\nIn some cases, the amount of the transaction is not a good indicator of the ecological footprint related to the transaction.\nIn such instances, the transactions can be refined by [answering transaction-specific questions](#operation/postTransactionsQuestions) (e.g., \"How many liters was your refill at the gas station?\").\n\n### Transaction Processing and Refinement Workflow\n\nA suggested workflow for processing an end customer's transaction looks as follows:\n\n1. Send the transaction to the ecolytiq service for processing:          \n   [`POST /transactions/v1/transactions`](#operation/postTransactionTransaction)\n\n2. Request a list of references to refinement questions that are available for this transaction:  \n   [`GET /transactions/v1/refinements?transaction_ids=<transaction_ids>`](#operation/getTransactionsRefinements)\n3. Retrieve the content (questions and answers) associated with the refinement question and answer IDs:          \n   [`GET /transactions/v1/questions?question_ids=<question_ids>`](#operation/getTransactionsQuestions)\n   > #### Note\n   > This step can also be executed in the very beginning by omitting the `question_ids` parameter.\n   In that case, **all available** questions are returned. \n   The result can then be cached on the client side.\n\n4. Have the end customer answer the refinement question(s):  \n   This must be handled in the client application\n\n5. Send the answers to the refinement questions to the ecolytiq platform:  \n   [`POST /transactions/v1/refinements`](#operation/postTransactionsRefinements)\n\n6. Retrieve the calculation result for the refined transaction:  \n   [`GET /transactions/v1/transactions?transaction_ids=<transaction_ids>`](#operation/getTransactionsTransactions) \n\n### Account Profiling\n\nFor some types of purchases, having additional knowledge about the end customer can be helpful. \nFor example, the supermarket shopping basket of a person regularly having meat on their plate differs from that of a vegan person. \nIt is possible to request such information for each individual transaction.\nHowever, it can be easier to attribute such information to an end customer once.\nThe [profiling API](#tag/Profiling-API) is available for this.\n\n## Educational and Informational Content\n\nAnother important feature of the ecolytiq Sustainability-as-a-Service&reg; platform is the educational content that allows end customers to gain more knowledge and awareness of the ecological footprint created by their purchase decisions.\nIn the long term informing and educating end customers about their individual impact will help make them more literate choices when consuming goods and services. \n\nAt present, ecolytiq offers the following types of content: \n\n  * **Comparables** are small examples that for a given CO<sub>2</sub> footprint show in a concrete and easily graspable way how much of an impact that is.\n\n  * **Insights** are short and simple tips and tricks that help end customers reduce their impact.\n    In combination with the [profiling API](#tag/Profiling-API), the Insights shown are even more relevant to the end customer.\n\n  * **Explanations** are content pieces that give information about the ecolytiq calculation method.\n\nThe [profiling API](#tag/Profiling-API) delivers references to the content pieces.\nUsing the [content API](#tag/Content-API) the texts of the educational and informational content pieces can be fetched in various different languages.\n\n## Use of the SaaS Platform\n\nThe ecolytiq platform is available as Software-as-a-Service (SaaS) solution shared among different Customers and accessible via public internet. \nOther modes of access, such as VPN access or dedicated SaaS platforms may be available upon request.\n\nThe customer is required to build and maintain the client application. Operations of the ecolytiq platform are handled by ecolytiq GmbH.\n\n## Security and Data Protection\n\nWe as ecolytiq GmbH adhere to and are compliant with all relevant data protection standards, such as GDPR, ISO27001, or PCI-DSS. \nOur platforms are regularly checked for security vulnerabilities.\n\nHowever, financial data contains highly sensitive information about individuals. Therefore, our customers **are not allowed** to send actual personally identifiable information to the ecolytiq SaaS platform.\nThis is especially important for account identifiers -- **Do not use actual bank account numbers or PANs** (personal account numbers, i.e., credit card numbers) as account identifiers!\n\nAccount data must be pseudonymized. We recommend using [UUIDs](https://en.wikipedia.org/wiki/Universally_unique_identifier) as account identifiers. \nMapping the account identifier to the end customer account **must be handled on the customer client application side**.\n",
      "x-displayName": "General Information"
    },
    {
      "name": "Changelog",
      "description": "### 2024-05-29\n* Added the purchased carbon credits amount into the [Get total or monthly footprints and carbon credits over time](#tag/Statistic-API/operation/getFootprintsOverTime).      \n\n### 2024-04-18\n* Updated the behaviour of `meta-category` and `sub-category` filters in \n[Get transactions per category for one month](#tag/Transaction-API/operation/getTransactionsForMonth), \n[Get total or monthly footprints over time](#tag/Statistic-API/operation/getFootprintsOverTime), and \n[Get footprints of an account per meta-category for one month](#tag/Statistic-API/operation/getFootprintsForMonth) such that `misc` and `general` are accepted as the meta and sub categories of `ex:general` category. \n\n### 2024-04-15\n* Added new error examples for [Get Explanations by ID](#operation/getContentExplanations)\n* Added new error examples for [Get Explanations (for given categories)](#operation/getContentExplanationsRandom) \n\n### 2024-04-10\n* Added new error code description for `INCOMPATIBLE` in [ecolytiq Error Code Summary](#tag/Errors/ecolytiq-Error-Code-Summary)\n* Added new error examples for [Get Comparables for a Given CO2 Footprint](#operation/getContentComparables)\n* Added new error examples for [Get Random Comparables for a Given CO2 Footprint](#operation/getContentComparablesRandom)\n\n### 2024-04-08\n* Added query parameter `sub_account_ids` to [Get footprints of an account per meta-category for one month](#tag/Statistic-API/operation/getFootprintsForMonth). This enables users to aggregate CO<sub>2</sub> footprints for a subset of their sub account IDs. \n\n### 2024-03-05\n* Modified descriptions of `account_id` and `sub_account_id` to prevent misinterpretation.\n\n### 2024-02-26\n* Added query parameter `sub_account_ids` to [Get transactions per category for one month](#tag/Transaction-API/operation/getTransactionsForMonth). This enables users to filter transactions by sub_account_ids.\n\n### 2024-02-14\n* Added [Retrieve refinements for account](#tag/Profiling-API/operation/getProfileRefinementsForAccount) endpoint to retrieve profile refinement information for a given account.\n* Added query parameter `sub_account_ids` to [Get total or monthly footprints over time](#tag/Statistic-API/operation/getFootprintsOverTime). This enables user to aggregate CO<sub>2</sub> footprints for a subset of their sub_account_ids. \n",
      "x-displayName": "Changelog"
    },
    {
      "name": "Authentication",
      "x-displayName": "Authentication"
    },
    {
      "name": "Errors",
      "description": "## HTTP Status Code Summary\n| Status Code                        | Description                                                                                      |\n|------------------------------------|--------------------------------------------------------------------------------------------------|\n| 200 - OK                           | Everything worked as expected.                                                                   |\n| 201 - Created                      | Everything worked as expected. Resource created.                                                 |\n| 204 - No Content                   | Everything worked as expected.                                                                   |\n| 400 - Bad Request                  | The request was unacceptable, often due to missing a required parameter.                         |\n| 401 - Unauthorized                 | No valid Access Token provided.                                                                  |\n| 403 - Forbidden                    | The API key doesn't have permissions to perform the request.                                     |\n| 404 - Not Found                    | The requested resource doesn't exist.                                                            |\n| 409 - Conflict                     | The request conflicts with another request (perhaps due to using the same idempotent key).       |\n| 422 - Unprocessable Entity         | Unprocessable Entity                                                                             |\n| 500, 502, 503, 504 - Server Errors | Something went wrong on ecolytiq's end.                                                          |\n\n## ecolytiq Error Code Summary\necolytiq errors are used when a request is targeting multiple entities, and the request was unable to be finished fully successful. \nIn this case, the response will contain both successful results and errors. The error codes used for this type of error are the following. \n\n| Error Code             | Description                                                                       | API                       |\n|------------------------|-----------------------------------------------------------------------------------|---------------------------|\n| NOT_FOUND              | Central entity type in request, or anything related to it, is missing.            | [Get Insights by IDs](#operation/getContentInsights) <br/> [Get Insights (for a Given Category)](#operation/getContentInsightsRandom) <br/> [Get Comparables for a Given CO2 Footprint](#operation/getContentComparables) <br/> [Get Random Comparables for a Given CO<sub>2</sub> Footprint](#operation/getContentComparablesRandom) <br/> [Get Explanations by ID](#operation/getContentExplanations) <br/> [Get Explanations (for given categories)](#operation/getContentExplanationsRandom) |\n| INCOMPATIBLE           | Central entity type in request, or anything related to it, is not compatible with parameters in the request. | [Get Comparables for a Given CO2 Footprint](#operation/getContentComparables) |\n| CURRENCY_NOT_SUPPORTED | We can't process the transaction because we do not support the provided currency. | [Process transactions](#operation/postTransactionsTransactions) |\n| INITIATE_PAYMENT_FAILURE | We could not initialize the stripe payment process. | [Purchase carbon credits](#operation/purchaseCarbonCredits) |\n",
      "x-displayName": "Errors"
    },
    {
      "name": "Postman",
      "description": "## Import Request Collection and Environment\n\n### Request Collection\n\n1. In Postman, click on the \"Import\" button in the upper left corner.\n\n2. In the opened window click on \"Choose Files\" under \"Import File\".\n\n3. Select the file \"preview_ecolytiq_Sandbox.postman_collection.json\" and press \"open\".\n\n4. The collection is now imported and can be found in the list on the left side of the window.\n\n\n### Environment\n\n1. In Postman, click on the \"Import\" button in the upper left corner.\n\n2. Click on \"Import\" in the lower right corner of the currently opened window.\n\n3. Click on \"Select File\", choose then \"*.postman_environment.json\" (you get the file during the onboarding phase) and press \"open\".\n\n4. Close the \"Management Environment\" window.\n\n5. Select \"Sandbox\" from the dropdown in the upper right corner.\n\n## Download\n\n<a href =\"https://developer.ecolytiq.com/ecolytiq_Sandbox.postman_collection.json\" download>ecolytiq_Sandbox.postman_collection.json</a>\n",
      "x-displayName": "Postman"
    },
    {
      "name": "Info API",
      "description": "The info API can be used to obtain information about the ecolytiq platform configuration and available features. \nIt offers a simple and reliable method to verify, \n\n* Which [country models for CO<sub>2</sub>](#operation/getInfoCo2models) footprint calculation are available and accessible to the requestor,\n\n* Which [categorization systems](#operation/getInfoCategorySystems) for transactions are available and accessible for transaction enrichment,\n\n* For some categorization systems, which [categories](#operation/getInfoCategories) are available\n",
      "x-displayName": "Info API"
    },
    {
      "name": "Transaction API",
      "description": "The transaction API is used to process financial transactions by the ecolytiq Sustainability-as-a-Service&reg; platform.\n\nIt is possible to send transactions for enrichment and receive the calculated CO<sub>2</sub> footprint based on a combination of the transaction amount and transaction category. \n\nFor some types of transactions, this may, however, be insufficient as the amount of money spent does not directly correlate to the CO<sub>2</sub> (equivalent) emissions of the purchased goods and services.\nFor example, airline ticket prices are becoming increasingly expensive the closer the date of travel is. But the amount of CO<sub>2</sub> emissions is independent of whether the ticket was bought last minute or a year in advance. \nIn such cases, the transaction data can be refined by answering specific transaction-related questions, like the duration of the flight, which will in turn allow for a much more accurate calculation of the CO<sub>2</sub> emissions.\n",
      "x-displayName": "Transaction API"
    },
    {
      "name": "Content API",
      "description": "The ecolytiq Sustainability-as-a-Service&reg; platform offers a variety of product features that go beyond pure calculation of the CO<sub>2</sub> footprint related to a financial transaction.\nThere are \n\n* Comparables: Small information pieces that put a given CO<sub>2</sub> footprint into perspective by comparing it to something easily comprehensible, like a distance driven by a car.\n  As the name suggests a Comparable is a concrete example of what a certain CO<sub>2</sub> footprint means.  \n  It can be used to create awareness on the end customer's side on how much of an impact a certain financial transaction has.\n\n* Insights: Information pieces with tips and tricks on how a customer can reduce their personal CO<sub>2</sub> emissions\n\n* Explanations: Information pieces detailing how the ecolytiq calculation method works.\n\nThose content pieces can be retrieved via the content API in various languages.\n",
      "x-displayName": "Content API"
    },
    {
      "name": "Profiling API",
      "description": "In the most basic way the ecolytiq Sustainability-as-a-Service&reg; platform is used to calculate the CO<sub>2</sub> footprint related to a \"spending transaction\" by taking into account the amount of money spent and the category of the transaction.\nThis gives an estimate of the footprint based on average consumer behavior. \nFor example, the average grocery basket is still plenty of meat.\nHowever, a specific end customer may have chosen to live a meat-reduced, meat-free, vegetarian, or vegan diet.\nHence the average shopping basket will give an inaccurate CO<sub>2</sub> footprint for them.\nTo improve the footprint calculation it is possible to store additional information about an end customer and improve the calculation accuracy in turn.\n\nThe main entities of the profiling API are:\n- **Questions** that can be asked to the end customer to gather information about their behavior.\n- **Answers** are predefined choices to answer the questions.\n- If a user answered a question, we call that process and the resulting question-answer pair **Refinement**. It refines our knowledge about the user.\n- Account specific **Insights** as described in the [Content API](#tag/Content-API) can be retrieved via the profiling API.\n",
      "x-displayName": "Profiling API"
    },
    {
      "name": "Account API",
      "description": "Should the necessity arise to remove all data of a specific end customer from the ecolytiq platform this can be done using the account API.\n",
      "x-displayName": "Account API"
    },
    {
      "name": "Statistic API",
      "description": "Use these endpoints to get aggregated CO<sub>2</sub> footprint and credits data about businesses, users or sub-accounts.\n",
      "x-displayName": "Statistic API"
    },
    {
      "name": "Feedback API",
      "description": "Use these endpoints to submit various types of feedback from a user.\n",
      "x-displayName": "Feedback API"
    },
    {
      "name": "Action API",
      "description": "This API facilitates direct actions towards environmental improvement through ecoAction.  It currently supports the purchase of carbon credits, allowing users to actively contribute to carbon retirement.\n",
      "x-displayName": "Action API"
    }
  ],
  "paths": {
    "/oauth/token": {
      "post": {
        "operationId": "postOAuthToken",
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "description": "Request OAuth 2.0 Access Token with client credentials grant. This endpoint is protected with Basic Auth. Use the `client_id` as username and the `client_secret` as password.\n\nToken lifetime in seconds is part of the response alongside the bearer token. It is typically set to 1 hour.\n",
        "summary": "Request Access Token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AccessToken and Lifetime\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Invalid or expired Client Credentials\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiValidationError"
                },
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "timestamp": "2023-04-25T12:11:15.795+00:00",
                      "status": 401,
                      "error": "Unauthorized",
                      "path": "/oauth/token"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/info/v1/co2models": {
      "get": {
        "operationId": "getInfoCo2models",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a list of supported calculation models for CO<sub>2</sub> footprint calculation.\nThe `enabled` flag informs whether a specific model is available for use by the requesting set of client credentials since access to the models may vary from customer to customer.\n",
        "summary": "List of CO2 models",
        "tags": [
          "Info API"
        ],
        "responses": {
          "200": {
            "description": "List of supported and enabled CO<sub>2</sub> models.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CO2ModelResponse"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/CO2ModelListExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/info/v1/category-systems": {
      "get": {
        "operationId": "getInfoCategorySystems",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a list of category systems that are supported by the platform. The `enabled` flag informs whether a customer/set of client credentials is permitted to use a specific category system, since not all supported category systems may be accessible by every customer.",
        "summary": "List of category systems",
        "tags": [
          "Info API"
        ],
        "responses": {
          "200": {
            "description": "List of supported and enabled category systems.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategorySystemListResponse"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/CategorySystemListExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/info/v1/categories": {
      "get": {
        "operationId": "getInfoCategories",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a list of available transaction categories.",
        "summary": "List of categories",
        "tags": [
          "Info API"
        ],
        "parameters": [
          {
            "in": "query",
            "required": false,
            "name": "model",
            "description": "The model for supported categories.\n\nIf unset, then all categories will be returned.\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListResponse"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/CategoryListExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/transactions/v1/transactions": {
      "post": {
        "operationId": "postTransactionsTransactions",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Use this endpoint to process and store bank transactions. \n\n### Identification of transactions and accounts\n\nTo be able to request information about a transaction at a later time each transaction must be uniquely identifiable by its `transaction_id`. \nWe recommend using [Universally Unique Identifiers](https://en.wikipedia.org/wiki/Universally_unique_identifier) for the `transaction_id`.\n\nThe transactions must also be assigned to individual accounts.\nThis allows using the account's [profile data](#tag/Profiling-API) for more accurate calculations.\n\n> #### IMPORTANT\n>\n> Although ecolytiq GmbH follows data protection and data security best practices and is compliant with ISO27001 and PCI-DSS, actual bank account numbers, personal account numbers (PAN, i.e., credit card numbers), or other personally identifiable information (PII) **must not be used as `account_id`**.\n>\n> Pseudonymization of account information and maintaining the list relating the end customer's PII to the `account_id`s used on the ecolytiq platform **must be handled on the customer side**.\n>\n> ecolytiq GmbH cannot be held liable for any loss, leak, or unauthorized publication of PII which is a direct result of violating these rules.\n\nWe recommend using [Universally Unique Identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) for the `account_id`s.\n\n### Immediate Response\n\nThe request is by default synchronous, i.e. the processing result is returned immediately in the response body to the request.\nSuccessfully processed transactions are in the results list, identifiable by their `transaction_id`. \nIn case of an error (e.g. unknown category), you can find the transaction in the errors list, identifiable by their `transaction_id` as well. \n\n### Asynchronous Request\n\nIt is also possible to only send the data for processing and not wait for an immediate server response with the calculation results.\nIn that case, the `async` flag in the request has to be set to `true`.\nThe server will only respond with a `202` status, i.e., accept the request, but will queue the transactions for later processing.\nThe calculation result can later be requested by calling the [`GET /transactions/v1/transactions`](#operation/getTransactionsTransactions) endpoint with the corresponding `transaction_id`s.\n",
        "summary": "Process transactions",
        "tags": [
          "Transaction API"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRequest"
              },
              "examples": {
                "Request for Retail Banking": {
                  "$ref": "#/components/examples/Transaction-Request-Example-Retail"
                },
                "Request for Commercial Banking": {
                  "$ref": "#/components/examples/Transaction-Request-Example-Commercial"
                },
                "Request with Merchant": {
                  "$ref": "#/components/examples/Transaction-Request-Example-Merchant"
                },
                "Request for asynchronously processing": {
                  "$ref": "#/components/examples/Transaction-Request-Example-Async"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result of Transaction processing.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                },
                "examples": {
                  "Response for Retail Banking": {
                    "$ref": "#/components/examples/Transaction-Response-Example-200-Retail"
                  },
                  "Response for Commercial Banking": {
                    "$ref": "#/components/examples/Transaction-Response-Example-200-Commercial"
                  },
                  "Response with Merchant": {
                    "$ref": "#/components/examples/Transaction-Response-Example-200-With-Merchant"
                  },
                  "Transaction currency is not supported": {
                    "$ref": "#/components/examples/TransactionResponseCurrencyNotSupportedExample"
                  },
                  "Model not found": {
                    "$ref": "#/components/examples/TransactionResponseModelNotFoundExample"
                  },
                  "Carbon intensity factor not found": {
                    "$ref": "#/components/examples/TransactionResponseCifNotFoundExample"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Result of Transaction processing.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionAsyncResponse"
                },
                "examples": {
                  "Response": {
                    "$ref": "#/components/examples/Transaction-Response-Example-202-Accepted"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Size of Transactions is invalid.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiValidationError"
                },
                "examples": {
                  "Bad Request": {
                    "summary": "400 Bad Request",
                    "value": {
                      "path": "/transactions/v1/transactions",
                      "timestamp": "2023-04-25T12:34:56.78+00:00",
                      "status": 400,
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          },
          "403": {
            "description": "Forbidden. An existing transaction cannot be overwritten with a different account.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Response": {
                    "$ref": "#/components/examples/AccessDenied403"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getTransactionsTransactions",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get Transactions by IDs",
        "description": "Retrieve information about previously processed transactions identified by their IDs.",
        "tags": [
          "Transaction API"
        ],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "name": "ids",
            "schema": {
              "type": "array",
              "minItems": 1,
              "maxItems": 100,
              "items": {
                "$ref": "#/components/schemas/TransactionId"
              }
            },
            "style": "form",
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of requested Transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiValidationError"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "path": "/transactions/v1/transactions",
                      "timestamp": "2023-04-25T12:34:56.78+00:00",
                      "status": 400,
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/transactions/v1/accounts/{account_id}/months/{month}/transactions": {
      "get": {
        "operationId": "getTransactionsForMonth",
        "summary": "Get transactions per category for one month",
        "description": "Returns the transactions of an account for one specific month. If no transactions are found with the given filter parameters an empty array will be returned.",
        "tags": [
          "Transaction API"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "description": "The ID of the account holder/user.",
            "schema": {
              "type": "string"
            },
            "example": "aecdcc5f-e128-4814-93c3-57a4382675e5"
          },
          {
            "$ref": "#/components/parameters/subAccountIdsForTransactionApi"
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "description": "The month for which the transactions should be returned. Month should be formatted as `YYYY-MM` according to ISO 8601.",
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}$"
            },
            "example": "2023-06"
          },
          {
            "$ref": "#/components/parameters/metaCategoryParameter"
          },
          {
            "$ref": "#/components/parameters/subCategoryParameter"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sort the transactions by the given attribute. If no value is given, `datetime.asc` is applied by default.",
            "schema": {
              "type": "string",
              "enum": [
                "co2_footprint_in_g.asc",
                "co2_footprint_in_g.desc",
                "datetime.asc",
                "datetime.desc"
              ]
            },
            "example": "co2_footprint_in_g.desc"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Restrict the number of returned transactions to the given number. If no value is given, a default limit of 500 is applied.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500
            },
            "example": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Transactions for the given account and month.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionsForMonthResponse"
                },
                "examples": {
                  "Get all transactions": {
                    "$ref": "#/components/examples/GetAllTransactionsExample"
                  },
                  "Get transactions for a meta category": {
                    "$ref": "#/components/examples/GetMetaCategoryTransactionsExample"
                  },
                  "Get transactions for a sub category": {
                    "$ref": "#/components/examples/GetSubCategoryTransactionsExample"
                  },
                  "Get transactions empty result": {
                    "$ref": "#/components/examples/GetTransactionsEmptyResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Sub category without meta category": {
                    "$ref": "#/components/examples/BadRequestGetAggregatedCo2ByMonth-Sub-Without-Meta-Example"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired."
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Meta and sub category": {
                    "$ref": "#/components/examples/NotFoundGetAggregatedCo2ByMonth-Meta-Sub-Example"
                  },
                  "Meta category": {
                    "$ref": "#/components/examples/NotFoundGetAggregatedCo2ByMonth-Meta-Example"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/transactions/v1/update-category": {
      "post": {
        "operationId": "postTransactionsUpdateCategory",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Use this endpoint to update categories for given transactions.",
        "summary": "Update Category",
        "tags": [
          "Transaction API"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCategoryUpdateRequest"
              },
              "examples": {
                "Minimal Request": {
                  "$ref": "#/components/examples/Transaction-Category-Update-Request-Example-01"
                },
                "Asynchronous Request": {
                  "$ref": "#/components/examples/Transaction-Category-Update-Request-Example-02"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result of Transaction Category Update.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                },
                "examples": {
                  "Minimal-Request-Response": {
                    "$ref": "#/components/examples/Transaction-Category-Update-Response-Example-01"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Result of Transaction processing.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionAsyncResponse"
                },
                "examples": {
                  "Response": {
                    "$ref": "#/components/examples/Transaction-Category-Update-Response-Example-02"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Size of Transactions is invalid.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiValidationError"
                },
                "examples": {
                  "BadRequest-Example": {
                    "value": {
                      "path": "/transactions/v1/update-category",
                      "timestamp": "2023-04-25T12:34:56.78+00:00",
                      "status": 400,
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/transactions/v1/refinements": {
      "get": {
        "operationId": "getTransactionsRefinements",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get Available Questions for Refinement of Specific Transactions",
        "description": "For certain types of goods or services the amount spent may not actually be an accurate representation of the CO<sub>2</sub> (equivalent) emission caused by that good or service. \nA few examples of such types of transactions are:\n  * Service stations: Fuel prices are highly volatile and vary from station to station. Therefore, the volume and type of fuel could be used for better calculation of the CO<sub>2</sub> emission related to a service station transaction.\n  * Air travel: Prices for airline tickets are dependent on the day of the flight as well as even more so on the date of purchase. Therefore, the hours of the flight give a better basis for calculating CO<sub>2</sub> emissions for air travel.\n\nCalling this endpoint with valid transaction IDs will return a list of suitable refinement question IDs for the transactions in request.  If the question has already been answered the reference to the corresponding answer (or the value if it is not a predefined answer) will be also returned.\n> #### Note\n> Calling this endpoint returns only references to content pieces (i.e., content IDs for questions and/or answers).\n> The mapping of question IDs / answer IDs and their text representation can be obtained from the [`GET /transactions/v1/questions`](#operation/getTransactionsQuestions) endpoint",
        "tags": [
          "Transaction API"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "transaction_ids",
            "description": "a list of transaction IDs",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": [
              "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "75353c62-6757-4740-979d-dfa52cdb9fba"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transaction ids and their corresponding question ids. If the question is already answered the field `answer_id` is set. Otherwise, it is `null`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionQuestionsResponse"
                },
                "examples": {
                  "Refinement questions without answer": {
                    "$ref": "#/components/examples/RefinementsUnansweredResponseExample"
                  },
                  "Refinement questions answered": {
                    "$ref": "#/components/examples/RefinementsAnsweredResponseExample"
                  },
                  "No refinement questions available": {
                    "$ref": "#/components/examples/RefinementsUnavailableResponseExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiValidationError"
                },
                "examples": {
                  "BadRequest-Example": {
                    "$ref": "#/components/examples/BadRequestRefinements-Example"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      },
      "post": {
        "operationId": "postTransactionsRefinements",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Recalculate the carbon footprint associated with a transaction by providing answers to specific questions. \n\nThe request must include the `transaction_id` and the `answer_id`. \nFor questions with answers of the `SELECTABLE` type, this is already sufficient.\nFor questions with answers of the `INPUT` type, the `input` value must also be included.\n\nReferences to questions relevant to certain transaction can be retrieved by calling the [`GET /transactions/v1/refinements`](#operation/getTransactionsRefinements) endpoint with the corresponding transaction ID.\nThe text version of the questions and possible answers can be obtained by calling the [`GET /transactions/v1/questions`](#operation/getTransactionsQuestions) endpoint (with the question IDs).\n",
        "summary": "Provide Answers for Transaction Refinement",
        "tags": [
          "Transaction API"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionBulkAnswersRequest"
              },
              "examples": {
                "Synchronous Request for Answering Refinement Questions": {
                  "$ref": "#/components/examples/RefinementsAnswerFlightsRequestExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Confirmation that answer is saved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRefinementResponse"
                },
                "examples": {
                  "Updated Calculation Result": {
                    "$ref": "#/components/examples/RefinementsAnswerFlightsResponseExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Size of Transactions is invalid.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiValidationError"
                },
                "examples": {
                  "BadRequest-Example": {
                    "value": {
                      "path": "/transactions/v1/refinements",
                      "timestamp": "2023-04-25T12:34:56.78+00:00",
                      "status": 400,
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/transactions/v1/questions": {
      "get": {
        "operationId": "getTransactionsQuestions",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get Questions and Answers for Transaction Refinement",
        "description": "Get questions, answers, and translations, used to refine a transaction.\n\nCalling this endpoint without the `question_ids` parameter will return the text of all questions that can be used for transaction refinement. \nA client application could fetch the question-and-answer texts once and cache them for a certain amount of time.\n\nIncluding the `question_ids` parameter returns only the content for the referenced questions.\n\nCalling this endpoint without the `languages_codes` parameter will return the text of all questions, and their associated answers, in all available language translations.\n\nIncluding the `languages_codes` parameter returns only the content with the referenced language translations.\n\nTo get a list of references to questions relevant to a specific transaction, please use the \n[\"Get refinements for transactions\"](#operation/getTransactionsRefinements) endpoint.\n\nIf no questions for the given `ids` or translations for the given `languages_codes` are found, the response is handled as a partial success. Corresponding information\nwill be returned in the error list of the response.\n\n> #### Note\n>\n> This endpoint returns actual content pieces.\n",
        "tags": [
          "Transaction API"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "question_ids",
            "description": "a list of question ids. If the list of ids is not present, all questions (+answers) are returned.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": [
              "9ce39d4f-cb36-4e93-b896-822156c9c159",
              "1411f1a1-251f-4220-a44b-441e6941ebf0"
            ]
          },
          {
            "$ref": "#/components/parameters/languageCodes"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Questions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/content/v1/comparables": {
      "get": {
        "operationId": "getContentComparables",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content API"
        ],
        "description": "Get a specific Comparable or a list of Comparables or all Comparables for a given CO<sub>2</sub> footprint.\n\nThe amount of CO<sub>2</sub> (`co2_footprint`) in grams to compare is required for calling this endpoint. \nIn addition, it can be called with a list of content IDs (`ids` parameter) to select which Comparables shall be displayed.\n\nIt is possible to retrieve the Comparables in different languages via the `language_codes` parameter.\n",
        "summary": "Get Comparables for a Given CO2 Footprint",
        "parameters": [
          {
            "in": "query",
            "name": "co2_footprint",
            "description": "CO<sub>2</sub> footprint in grams",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "example": 12345
            }
          },
          {
            "in": "query",
            "name": "ids",
            "description": "a list of ids. If the list of ids is not present, all Comparables are returned.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "02805b59-878d-438d-a68b-9d721766ec60"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/languageCodes"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Comparables",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComparableResponse"
                },
                "examples": {
                  "Get comparables": {
                    "$ref": "#/components/examples/ComparableResponseExample"
                  },
                  "Error - Requested comparable does not exist": {
                    "$ref": "#/components/examples/ComparableErrorResponseComparableNotFoundExample"
                  },
                  "Error - Requested language does not exist": {
                    "$ref": "#/components/examples/CommonErrorResponseTranslationNotFoundExample"
                  },
                  "Error - Requested comparable is incompatible with given co2 footprint": {
                    "$ref": "#/components/examples/ComparableErrorResponseCo2FootprintIncompatibleExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiValidationError"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "path": "/content/v1/comparables",
                      "timestamp": "2023-04-25T12:34:56.78+00:00",
                      "status": 400,
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/content/v1/comparables/random": {
      "get": {
        "operationId": "getContentComparablesRandom",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content API"
        ],
        "description": "Get an individual Comparable or a list of Comparables for a given CO<sub>2</sub> footprint. The content pieces returned by calling this endpoint are chosen at random.\nThe amount of CO<sub>2</sub> (`co2_footprint`) in grams to compare is required for calling this endpoint.  The number of Comparables returned in the response can be specified using the `size` parameter.\nThe Comparables returned can be limited to specific categories using the `categories` parameter.\nIt is possible to retrieve the Comparables in different languages via the `language_codes` parameter.",
        "summary": "Get Random Comparables for a Given CO2 Footprint",
        "parameters": [
          {
            "in": "query",
            "name": "co2_footprint",
            "description": "CO<sub>2</sub> footprint in grams",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "example": 12345
            }
          },
          {
            "$ref": "#/components/parameters/categories"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/languageCodes"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of comparables",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComparableResponse"
                },
                "examples": {
                  "Get random comparables": {
                    "$ref": "#/components/examples/ComparableResponseExample"
                  },
                  "Error - Requested language does not exist": {
                    "$ref": "#/components/examples/CommonErrorResponseTranslationNotFoundExample"
                  },
                  "Error - Filter category does not exist": {
                    "$ref": "#/components/examples/ComparableErrorResponseCategoryNotFoundExample"
                  },
                  "Error - No comparables fit the requested filter": {
                    "$ref": "#/components/examples/ComparableErrorResponseAnyComparablesNotFoundExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiValidationError"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "path": "/content/v1/comparables/random",
                      "timestamp": "2023-04-25T12:34:56.78+00:00",
                      "status": 400,
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/content/v1/insights": {
      "get": {
        "operationId": "getContentInsights",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content API"
        ],
        "description": "Get all or specific Insights on how to improve individual CO<sub>2</sub> impact.",
        "summary": "Get Insights by IDs",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "a list of ids. If the list of ids is not present, all insights are returned.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "06462ed4-32e7-46b0-8920-31e982ba22c0"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/languageCodes"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of insights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightsResponse"
                },
                "examples": {
                  "Get insights": {
                    "$ref": "#/components/examples/InsightsResponseExample"
                  },
                  "Error - Requested insight does not exist": {
                    "$ref": "#/components/examples/InsightErrorResponseInsightNotFoundExample"
                  },
                  "Error - Requested language does not exist": {
                    "$ref": "#/components/examples/CommonErrorResponseTranslationNotFoundExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/content/v1/contextual-insights": {
      "get": {
        "operationId": "getContextualInsights",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content API"
        ],
        "description": "Get Contextual Insights by IDs.",
        "summary": "Get Contextual Insights by IDs.",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "a list of content ids. If the list of ids is not present, all contextual insights are returned.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "4573f579-6173-439d-9489-72dd3d69f7d7"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/languageCodes"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of insights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextualInsightsResponse"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/ContextualInsightsResponseExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/content/v1/insights/random": {
      "get": {
        "operationId": "getContentInsightsRandom",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content API"
        ],
        "description": "Get a number of random Insights on how to improve the individual CO<sub>2</sub> footprint.\nThe Insights returned can be limited to specific categories.  [Available categories](#operation/getInfoCategories) can be retrieved using the [Info API](#tag/Info-API).",
        "summary": "Get Insights (for a Given Category)",
        "parameters": [
          {
            "$ref": "#/components/parameters/categories"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/languageCodes"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of insights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightsResponse"
                },
                "examples": {
                  "Get random insights": {
                    "$ref": "#/components/examples/InsightsResponseExample"
                  },
                  "Error - Requested language does not exist": {
                    "$ref": "#/components/examples/CommonErrorResponseTranslationNotFoundExample"
                  },
                  "Error - Filter category does not exist": {
                    "$ref": "#/components/examples/InsightErrorResponseCategoryNotFoundExample"
                  },
                  "Error - No insights fit the requested filter": {
                    "$ref": "#/components/examples/InsightErrorResponseAnyInsightsNotFoundExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "error_code": "Invalid request",
                      "error_description": "Your request is invalid. Please see API spec.",
                      "request_id": "6bf3202ade4a7411"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/profiling/v1/insights": {
      "get": {
        "operationId": "getProfilingInsights",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Profiling API"
        ],
        "description": "Returns all matching references to Insights for specified accounts. \nThe Insights can also be restricted to specific [categories](#operation/getInfoCategories) (see [Info API](#tag/Info-API)).\n> #### Note\n> This endpoint only returns references (i.e., content IDs) to the content. The actual content can be retrieved via the [content API](#tag/Content-API).",
        "summary": "Get Insights (for accounts)",
        "parameters": [
          {
            "in": "query",
            "name": "account_ids",
            "description": "list of account ids",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "a083e879-b37c-4307-9407-a9825d82800b"
          },
          {
            "$ref": "#/components/parameters/categories"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of content ids for the given accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightsProfilingResponse"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/InsightsProfilingResponseExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiValidationError"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "path": "/profiling/v1/insights",
                      "timestamp": "2023-04-25T12:34:56.78+00:00",
                      "status": 400,
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/profiling/v1/contextual-insights": {
      "get": {
        "operationId": "getContextualInsightsForAccounts",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Profiling API"
        ],
        "description": "Get Contextual Insights (for accounts)\n> #### Note\n> This endpoint only returns references (i.e., content IDs) to the content. The actual content can be retrieved via the [content API](#tag/Content-API).",
        "summary": "Get Contextual Insights (for accounts)",
        "parameters": [
          {
            "in": "query",
            "name": "account_ids",
            "description": "list of account ids",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "a083e879-b37c-4307-9407-a9825d82800b"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of content ids for the given accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightsProfilingResponse"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/InsightsProfilingResponseExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiValidationError"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "path": "/profiling/v1/contextual-insights",
                      "timestamp": "2023-04-25T12:34:56.78+00:00",
                      "status": 400,
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/content/v1/explanations": {
      "get": {
        "operationId": "getContentExplanations",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content API"
        ],
        "description": "Retrieve all or individual Explanations on the ecolytiq calculation.",
        "summary": "Get Explanations by ID",
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "a list of ids. If the list of ids is not present, all explanations are returned.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "3f967ccf-8b20-4bee-9879-1174f7a7b250"
          },
          {
            "$ref": "#/components/parameters/languageCodes"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of explanations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplanationsResponse"
                },
                "examples": {
                  "Get explanations": {
                    "$ref": "#/components/examples/ExplanationResponseExample"
                  },
                  "Error - Requested explanation does not exist": {
                    "$ref": "#/components/examples/ExplanationErrorResponseExplanationNotFoundExample"
                  },
                  "Error - Requested language does not exist": {
                    "$ref": "#/components/examples/CommonErrorResponseTranslationNotFoundExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/content/v1/explanations/random": {
      "get": {
        "operationId": "getContentExplanationsRandom",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Content API"
        ],
        "description": "Get randomly chosen Explanations on the ecolytiq calculation method.  The results returned can be limited to certain categories. \nUse the [info API](#tag/Info-API) to fetch a (list of available categories)[#operation/getInfoCategories].",
        "summary": "Get Explanations (for given categories)",
        "parameters": [
          {
            "$ref": "#/components/parameters/categories"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/languageCodes"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of explanations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExplanationsResponse"
                },
                "examples": {
                  "Get random explanations": {
                    "$ref": "#/components/examples/ExplanationResponseExample"
                  },
                  "Error - Requested language does not exist": {
                    "$ref": "#/components/examples/CommonErrorResponseTranslationNotFoundExample"
                  },
                  "Error - Filter category does not exist": {
                    "$ref": "#/components/examples/ExplanationErrorResponseCategoryNotFoundExample"
                  },
                  "Error - No explanations fit the requested filter": {
                    "$ref": "#/components/examples/ExplanationErrorResponseAnyExplanationsNotFoundExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "request_id": "88756220047cbc61",
                      "error_code": "Invalid request",
                      "error_description": "Your Request is invalid. Please see API specs."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/profiling/v1/questions": {
      "get": {
        "operationId": "getProfilingQuestions",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get Questions and Answers for Profiling",
        "description": "Get questions, answers, and translations, used for Profiling. \nThe answers to the questions are used to store additional information for specific end customers.  This is useful for improving the calculation results (e.g., if the end customer is known to be vegan, the vegan \"base basket\" is used for the calculation of the footprint after shopping in the supermarket) as well as reducing unsuitable Insights (i.e., someone known to be vegan will not be shown information on how much CO<sub>2</sub> they can save by reducing meat in their diet).\nCalling this endpoint without the `question_ids` parameter will return the text of all questions that can be used for Profiling. \nIncluding the `question_ids` parameter returns only the content for the referenced questions.\nCalling this endpoint without the `languages_codes` parameter will return the text of all questions, and their associated answers, in all available language translations.\nIncluding the `languages_codes` parameter returns only the content with the referenced language translations.\nIf no questions for the given `ids` or translations for the given `languages_codes` are found, the response is handled as a partial success. Corresponding information will be returned in the error list of the response. > #### Note:\n> This endpoint returns the actual content.",
        "tags": [
          "Profiling API"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "ids",
            "description": "a list of question ids. If the list of ids is not present, all questions (+answers) are returned.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": [
              "6b988e5a-5540-42d5-a0a7-d24ff054c2f9",
              "4f8d7bdf-6906-4680-a1d8-b05468b3e530"
            ]
          },
          {
            "$ref": "#/components/parameters/languageCodes"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of profiling questions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponse"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/Profile-Refinement-Request-With-IDs-Example"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/profiling/v1/answer": {
      "post": {
        "operationId": "postProfileRefinements",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Store profile refinements. \nIn the case of pre-defined choices to answer a question, providing only the `answer_id` and the `account_id` is sufficient. For \"free text\" answers the `input` must be submitted as well.",
        "summary": "Store profile refinements",
        "tags": [
          "Profiling API"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAnswersRequest"
              },
              "examples": {
                "Example": {
                  "$ref": "#/components/examples/Profile-Answer-Request-Example"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Confirmation that answer is saved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAnswerResponse"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/Profile-Answer-Response-Example"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/profiling/v1/accounts/{account_id}/refinements": {
      "get": {
        "operationId": "getProfileRefinementsForAccount",
        "summary": "Retrieve refinements for account",
        "description": "Retrieve the latest profile refinements for the specified account. \nThe result includes only questions that have been answered by the account. \n\nUse cases:\n  - The main use case is to prefill selected answers in the user interface so that users can review & update their answer to a question.\n",
        "tags": [
          "Profiling API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountIdPath"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of profile refinements for an account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileRefinementsResponse"
                },
                "examples": {
                  "Get list of latest refinements for account": {
                    "$ref": "#/components/examples/ProfileRefinementsForAccountResponseExample"
                  },
                  "Account did not answer questions yet or does not exist": {
                    "$ref": "#/components/examples/ProfileRefinementsForAccountEmptyResponseExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/account/v1/delete-accounts": {
      "post": {
        "operationId": "postAccountDeleteAccounts",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "By calling this endpoint all data for the given accounts is deleted from the ecolytiq platform.\nThis includes\n* Transaction data\n* Profile data\n* Feedback data, both structured and unstructured\n\n> #### Warning \n>\n>  * There is no double confirmation!\n>    Once the endpoint is called with valid `account_ids` the data related to those `account_ids` is **gone for good**.\n>  * This does **not affect** orders placed via the [Action API](#tag/Action-API) (`/action/...` endpoints). \n",
        "summary": "Delete all data of the given accounts",
        "tags": [
          "Account API"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAccountsRequest"
              },
              "examples": {
                "Example": {
                  "$ref": "#/components/examples/Delete-Account-Request-Example"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Confirmation that the request has been processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAccountsResponse"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/Delete-Account-Response-Example"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Confirmation that the request can be handled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAccountsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired.\n"
          }
        }
      }
    },
    "/statistic/v1/accounts/{account_id}/footprints": {
      "get": {
        "operationId": "getFootprintsOverTime",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get total or monthly footprints and carbon credits over time",
        "description": "Returns an account's total or monthly CO<sub>2</sub> footprints and purchased carbon credits over time.",
        "tags": [
          "Statistic API"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "description": "The ID of the account holder/user. If the `account_id` doesn't exist, an empty list will be returned.",
            "schema": {
              "type": "string"
            },
            "example": "aecdcc5f-e128-4814-93c3-57a4382675e5"
          },
          {
            "$ref": "#/components/parameters/subAccountIdsForStatisticApi"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "description": "The beginning timestamp from when the data should be returned. Format according to ISO 8601. If not given, the timestamp one year ago will be used. For dates with lower timestamp precision, the corresponding start time will be considered, e.g. \"2023-06\" will be interpreted as \"2023-06-01T00:00:00Z\". The length of the specified time interval may not exceed 100 years.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Year Example": {
                "value": "2023"
              },
              "Month Example": {
                "value": "2023-06"
              },
              "Date Example": {
                "value": "2023-06-01"
              },
              "Timestamp Example": {
                "value": "2023-06-01T18:43:26.000Z"
              }
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "description": "The end timestamp from when the data should be returned. Format according to ISO 8601. If not given, the current timestamp will be used. For dates with lower timestamp precision, the corresponding end time will be considered, e.g. \"2023-06\" will be interpreted as \"2023-06-301T23:59:59Z\". The length of the specified time interval may not exceed 100 years.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Year Example": {
                "value": "2023"
              },
              "Month Example": {
                "value": "2023-06"
              },
              "Date Example": {
                "value": "2023-06-01"
              },
              "Timestamp Example": {
                "value": "2023-06-01T18:43:26.000Z"
              }
            }
          },
          {
            "name": "interval",
            "in": "query",
            "required": false,
            "description": "Defines in which intervals the footprint should be returned. Use `TOTAL` to get one single value for the whole timeframe. Use `MONTH` to return the footprint split by month. If an interval is not given, `TOTAL` will be used.",
            "schema": {
              "type": "string",
              "enum": [
                "TOTAL",
                "MONTH"
              ]
            },
            "example": "MONTH"
          },
          {
            "$ref": "#/components/parameters/metaCategoryParameter"
          },
          {
            "$ref": "#/components/parameters/subCategoryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Footprints and carbon credits amount for the given account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFootprintsAndCreditsOverTimeResponse"
                },
                "examples": {
                  "Get total footprint and credits": {
                    "$ref": "#/components/examples/GetTotalFootprintAndCreditsExample"
                  },
                  "Get monthly footprint and credits": {
                    "$ref": "#/components/examples/GetMonthlyFootprintsAndCreditsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Request parameter is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Invalid sub-category": {
                    "$ref": "#/components/examples/BadRequestGetAggregatedCo2ByMonth-Example"
                  },
                  "Date range too large": {
                    "$ref": "#/components/examples/DateRangeTooLarge-Example"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access token is invalid or expired."
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Meta and sub category": {
                    "$ref": "#/components/examples/NotFoundGetAggregatedCo2ByMonth-Meta-Sub-Example"
                  },
                  "Meta category": {
                    "$ref": "#/components/examples/NotFoundGetAggregatedCo2ByMonth-Meta-Example"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/statistic/v1/accounts/{account_id}/months/{month}/footprints": {
      "get": {
        "operationId": "getFootprintsForMonth",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get footprints of an account per meta-category for one month",
        "description": "Returns the CO<sub>2</sub> footprints of an account grouped by meta-categories (e.g. `food`) or categories (e.g. `ex:food.cafe`) for one specific month.",
        "tags": [
          "Statistic API"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "description": "The ID of the account holder/user. If the `account_id` doesn't exist, the categories with **0** (zero) `transaction_count` will be returned.",
            "schema": {
              "type": "string"
            },
            "example": "aecdcc5f-e128-4814-93c3-57a4382675e5"
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "description": "The month for which the footprints should be returned. `month` should be formatted as `YYYY-MM` according to ISO 8601.",
            "schema": {
              "type": "string"
            },
            "example": "2023-08"
          },
          {
            "$ref": "#/components/parameters/subAccountIdsForStatisticApi"
          },
          {
            "name": "meta-category",
            "in": "query",
            "required": false,
            "description": "Filter by a given meta category. If **no** `meta-category` is given, the transactions will be grouped by meta-categories. Otherwise, the transactions will be grouped by the **categories** of the given `meta-category`.<br>* Meta-category (e.g. `food`) is part of a category (e.g. `ex:food.cafe`), which is composed of the following structure `ex:meta-category.sub-category`. <br>* Category `ex:general` is an exception and its meta-category is `misc`.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "Retail Example": {
                "value": "living"
              },
              "Commercial Example": {
                "value": "businesstravel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Footprints for the given account and month.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFootprintsForMonthResponse"
                },
                "examples": {
                  "Get footprints per meta-category - Retail example": {
                    "$ref": "#/components/examples/GetCo2ByCategory_Retail_MetaExample"
                  },
                  "Get footprints per meta-category - Commercial example": {
                    "$ref": "#/components/examples/GetCo2ByCategory_Commercial_MetaExample"
                  },
                  "Get footprints per sub-category - Retail example": {
                    "$ref": "#/components/examples/GetCo2ByCategory_Retail_SubExample"
                  },
                  "Get footprints per sub-category - Commercial example": {
                    "$ref": "#/components/examples/GetCo2ByCategory_Commercial_SubExample"
                  },
                  "Get footprints per meta-category if account or transactions don't exist": {
                    "$ref": "#/components/examples/GetCo2ByCategory_NotExists_MetaExample"
                  },
                  "Get footprints per sub-category if account or transactions don't exist": {
                    "$ref": "#/components/examples/GetCo2ByCategory_NotExists_SubExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Request parameter are not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Blank Meta-Category Example": {
                    "$ref": "#/components/examples/MetaCategoryMayNotBlank-Example"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access token is invalid or expired."
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Meta-catgory not found": {
                    "$ref": "#/components/examples/MetaNotFoundExample"
                  },
                  "Meta-category for different system not found": {
                    "$ref": "#/components/examples/MetaForSystemNotFoundExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/statistic/v1/footprints/averages": {
      "get": {
        "operationId": "getAverageFootprints",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Get average footprints",
        "description": "Returns national average CO<sub>2</sub> footprint numbers.",
        "tags": [
          "Statistic API"
        ],
        "parameters": [
          {
            "name": "co2_model",
            "in": "query",
            "required": true,
            "description": "Specify a CO<sub>2</sub> model from the `GET /info/v1/co2models` endpoint to get statistics on the national average footprint for that model.",
            "schema": {
              "type": "string"
            },
            "example": "DE"
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "description": "This parameter is only applicable for commercial banking. Specify the ID of the account holder/user to get statistics on the industry average footprint for that model.",
            "schema": {
              "type": "string"
            },
            "example": "aecdcc5f-e128-4814-93c3-57a4382675e5"
          }
        ],
        "responses": {
          "200": {
            "description": "Average footprints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAverageFootprintsResponse"
                },
                "examples": {
                  "Only CO2 model given": {
                    "$ref": "#/components/examples/GetAverageFootprintsOnlyModelGivenExample"
                  },
                  "CO2 model and commercial account given": {
                    "$ref": "#/components/examples/GetAverageFootprintsModelAndAccountGivenExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Request parameter is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/BadRequestGetAverageFootprints-Example"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access token is invalid or expired."
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Unknown CO2 model": {
                    "$ref": "#/components/examples/NotFoundGetAverageFootprints-Example"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/feedback/v1/structured-feedback": {
      "post": {
        "operationId": "postStructuredFeedback",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Use this endpoint to send us structured feedback about insights, application features, footprint calculation results, etc. by using predefined questions and answers. This is the preferred way of submitting feedback.",
        "summary": "Submit structured feedback",
        "tags": [
          "Feedback API"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StructuredFeedbackRequest"
              },
              "examples": {
                "Answer ID with free text": {
                  "$ref": "#/components/examples/StructuredFeedbackRequestIdFreetextExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The feedback is saved."
          },
          "400": {
            "description": "Bad Request. Request parameter is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Invalid reference": {
                    "$ref": "#/components/examples/FeedbackInvalidReference400Example"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired."
          },
          "422": {
            "description": "Unprocessable entity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Transaction ID not found": {
                    "$ref": "#/components/examples/FeedbackTransactionIdNotFound422Example"
                  },
                  "Insight ID not found": {
                    "$ref": "#/components/examples/FeedbackInsightIdNotFound422Example"
                  },
                  "Answer ID not found": {
                    "$ref": "#/components/examples/FeedbackAnswerIdNotFound422Example"
                  },
                  "Invalid Reference provided": {
                    "$ref": "#/components/examples/FeedbackInvalidReference422Example"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/feedback/v1/unstructured-feedback": {
      "post": {
        "operationId": "postUnstructuredFeedback",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Use this endpoint to send us unstructured feedback, e.g. open questions or custom questions and answers. If possible, rather send structured feedback, since this is much easier to analyze.",
        "summary": "Submit unstructured feedback",
        "tags": [
          "Feedback API"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnstructuredFeedbackRequest"
              },
              "examples": {
                "Free text question and free text answer": {
                  "$ref": "#/components/examples/UnstructuredFeedbackRequestFreetextToFreetextExample"
                },
                "Free text question and binary answer": {
                  "$ref": "#/components/examples/UnstructuredFeedbackRequestFreetextToBinaryExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The feedback is saved."
          },
          "400": {
            "description": "Bad Request. Request parameter is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Invalid reference": {
                    "$ref": "#/components/examples/FeedbackInvalidReference400Example"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired."
          },
          "422": {
            "description": "Unprocessable entity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Transaction ID not found": {
                    "$ref": "#/components/examples/FeedbackTransactionIdNotFound422Example"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/action/v2/carbon-credits/projects": {
      "get": {
        "operationId": "getCarbonCreditProjects",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Use this endpoint to retrieve a list of projects to purchase carbon credits from.",
        "summary": "Get carbon credit projects",
        "tags": [
          "Action API"
        ],
        "responses": {
          "200": {
            "description": "A List of projects to purchase carbon credits from.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarbonCreditProjectsResponse"
                },
                "examples": {
                  "Get carbon credit projects": {
                    "$ref": "#/components/examples/CarbonCreditProjectsResponseExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired."
          },
          "403": {
            "$ref": "#/components/responses/ActionAccessDeniedResponse"
          }
        }
      }
    },
    "/action/v2/carbon-credits/projects/{projectId}/order": {
      "post": {
        "operationId": "purchaseCarbonCredits",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Action API"
        ],
        "summary": "Purchase carbon credits",
        "description": "This endpoint enables the user to order carbon credits from the specified project. It provides a unique link for completing payment through Stripe's secure checkout.  The total price is commercially rounded to two decimal places.\n",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the project from which carbon credits are purchased."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseCarbonCreditsRequest"
              },
              "examples": {
                "Purchase carbon credits request": {
                  "$ref": "#/components/examples/PurchaseCarbonCreditsRequestExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Checkout session created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseCarbonCreditsResponse"
                },
                "examples": {
                  "Purchase carbon credits response": {
                    "$ref": "#/components/examples/PurchaseCarbonCreditsResponseExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access Token is invalid or expired."
          },
          "403": {
            "$ref": "#/components/responses/ActionAccessDeniedResponse"
          },
          "404": {
            "description": "Not found. The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionErrorResponse"
                },
                "examples": {
                  "Project not found": {
                    "$ref": "#/components/examples/CarbonCreditProjectNotFoundExample"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "subCategoryParameter": {
        "name": "sub-category",
        "in": "query",
        "required": false,
        "description": "Filter by a given sub category.<br>* Sub-category (e.g.`cafe`) is part of a category (e.g. `ex:food.cafe`), which is composed of the following structure: `ex:meta-category.sub-category`. <br>* Category `ex:general` is an exception and its sub-category is `general`.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "Retail Example": {
            "value": "groceries"
          },
          "Commercial Example": {
            "value": "health"
          }
        }
      },
      "metaCategoryParameter": {
        "name": "meta-category",
        "in": "query",
        "required": false,
        "description": "Filter by a given meta category. Mandatory if sub-category query parameter is used, otherwise optional.<br>* Meta-category (e.g. `food`) is part of a category (e.g. `ex:food.cafe`), which is composed of the following structure `ex:meta-category.sub-category`. <br>* Category `ex:general` is an exception and its meta-category is `misc`.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "Retail Example": {
            "value": "food"
          },
          "Commercial Example": {
            "value": "administration"
          }
        }
      },
      "subAccountIdsForTransactionApi": {
        "name": "sub_account_ids",
        "in": "query",
        "description": "Filter by the given `sub_account_ids` that can be provided by commercial banking users.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "example": [
          "r56w78ae-909b-26eb-a2cd-99e3b60ebgw3",
          "2qwe61r4-t3d9-300e-95f6-b9bcf4010987"
        ]
      },
      "subAccountIdsForStatisticApi": {
        "name": "sub_account_ids",
        "in": "query",
        "description": "Provides aggregated CO<sub>2</sub> footprints for the given `sub_account_ids` that can be provided by commercial banking users.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "minItems": 0,
          "items": {
            "type": "string"
          }
        },
        "example": [
          "817811d6-7eee-4882-8274-7788b56be515",
          "6e50be2f-5f72-48e9-b55e-d10f1b77cb13"
        ]
      },
      "languageCodes": {
        "name": "language_codes",
        "in": "query",
        "description": "ISO639-1 language code(s) to select the output language(s) of the content piece(s).",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "minItems": 0,
          "items": {
            "type": "string",
            "minLength": 2,
            "maxLength": 10
          },
          "example": [
            "de",
            "en"
          ]
        }
      },
      "categories": {
        "name": "categories",
        "in": "query",
        "description": "used as a filter for categories.  If it is unset or empty all categories are used. A  [list of categories](#operation/getInfoCategories) can be retrieved using the [Info API](#tag/Info-API).\nSupports both ecolytiq 1.4 (`ECOLYTIQ`) and ecolytiq EEIO (`ECOLYTIQ_V2`) categories.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "minItems": 0,
          "items": {
            "type": "string",
            "maxLength": 64
          },
          "example": [
            "ex:food.groceries",
            "ex:transport.localtransport"
          ]
        }
      },
      "size": {
        "name": "size",
        "in": "query",
        "description": "Number of content pieces returned.",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "example": 2
        }
      },
      "accountIdPath": {
        "name": "account_id",
        "in": "path",
        "required": true,
        "description": "The ID of the account holder/user.",
        "schema": {
          "type": "string",
          "example": "aecdcc5f-e128-4814-93c3-57a4382675e5",
          "maxLength": 64
        }
      }
    },
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "examples": {
      "GetCo2ByCategory_Commercial_MetaExample": {
        "value": {
          "categories": [
            {
              "transaction_count": 12,
              "co2_footprint_in_g": 78262,
              "percentage_value": 22.334,
              "meta_category": "administration"
            },
            {
              "transaction_count": 15,
              "co2_footprint_in_g": 38663,
              "percentage_value": 11.033,
              "meta_category": "businesstravel"
            },
            {
              "transaction_count": 3,
              "co2_footprint_in_g": 65723,
              "percentage_value": 18.756,
              "meta_category": "equipment"
            },
            {
              "transaction_count": 8,
              "co2_footprint_in_g": 13605,
              "percentage_value": 3.883,
              "meta_category": "general"
            },
            {
              "transaction_count": 13,
              "co2_footprint_in_g": 27030,
              "percentage_value": 7.714,
              "meta_category": "material"
            },
            {
              "transaction_count": 10,
              "co2_footprint_in_g": 79746,
              "percentage_value": 22.757,
              "meta_category": "personnel"
            },
            {
              "transaction_count": 32,
              "co2_footprint_in_g": 47389,
              "percentage_value": 13.526,
              "meta_category": "utilities"
            }
          ]
        }
      },
      "GetCo2ByCategory_Retail_MetaExample": {
        "value": {
          "categories": [
            {
              "transaction_count": 7,
              "co2_footprint_in_g": 56132,
              "percentage_value": 18.169,
              "meta_category": "food"
            },
            {
              "transaction_count": 5,
              "co2_footprint_in_g": 17864,
              "percentage_value": 5.782,
              "meta_category": "general"
            },
            {
              "transaction_count": 11,
              "co2_footprint_in_g": 127532,
              "percentage_value": 41.279,
              "meta_category": "living"
            },
            {
              "transaction_count": 15,
              "co2_footprint_in_g": 87214,
              "percentage_value": 28.229,
              "meta_category": "misc"
            },
            {
              "transaction_count": 3,
              "co2_footprint_in_g": 9967,
              "percentage_value": 3.226,
              "meta_category": "shopping"
            },
            {
              "transaction_count": 11,
              "co2_footprint_in_g": 10242,
              "percentage_value": 3.315,
              "meta_category": "transport"
            }
          ]
        }
      },
      "GetCo2ByCategory_Commercial_SubExample": {
        "value": {
          "categories": [
            {
              "transaction_count": 3,
              "co2_footprint_in_g": 78262,
              "percentage_value": 66.934,
              "category": "ex:general.miscellaneous"
            },
            {
              "transaction_count": 6,
              "co2_footprint_in_g": 38663,
              "percentage_value": 33.066,
              "category": "ex:general.recreational"
            },
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "category": "ex:general.wholesale"
            }
          ]
        }
      },
      "GetCo2ByCategory_Retail_SubExample": {
        "value": {
          "categories": [
            {
              "transaction_count": 4,
              "co2_footprint_in_g": 38425,
              "percentage_value": 20.521,
              "category": "ex:food.cafe"
            },
            {
              "transaction_count": 4,
              "co2_footprint_in_g": 25421,
              "percentage_value": 13.576,
              "category": "ex:food.groceries"
            },
            {
              "transaction_count": 7,
              "co2_footprint_in_g": 52147,
              "percentage_value": 27.849,
              "category": "ex:food.alcohol"
            },
            {
              "transaction_count": 3,
              "co2_footprint_in_g": 17234,
              "percentage_value": 9.204,
              "category": "ex:food.beverages"
            },
            {
              "transaction_count": 6,
              "co2_footprint_in_g": 41017,
              "percentage_value": 21.905,
              "category": "ex:food.catering"
            },
            {
              "transaction_count": 2,
              "co2_footprint_in_g": 13007,
              "percentage_value": 6.946,
              "category": "ex:food.corner"
            }
          ]
        }
      },
      "GetCo2ByCategory_NotExists_MetaExample": {
        "value": {
          "categories": [
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "meta_category": "food"
            },
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "meta_category": "general"
            },
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "meta_category": "living"
            },
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "meta_category": "misc"
            },
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "meta_category": "shopping"
            },
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "meta_category": "transport"
            }
          ]
        }
      },
      "GetCo2ByCategory_NotExists_SubExample": {
        "value": {
          "categories": [
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "category": "ex:food.cafe"
            },
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "category": "ex:food.groceries"
            },
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "category": "ex:food.alcohol"
            },
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "category": "ex:food.beverages"
            },
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "category": "ex:food.catering"
            },
            {
              "transaction_count": 0,
              "co2_footprint_in_g": 0,
              "percentage_value": 0,
              "category": "ex:food.corner"
            }
          ]
        }
      },
      "CO2ModelListExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [
            {
              "code": "DE",
              "description": "CO<sub>2</sub> model of Germany.",
              "currency": "EUR",
              "enabled": true
            },
            {
              "code": "FR",
              "description": "CO<sub>2</sub> model of France.",
              "currency": "EUR",
              "enabled": false
            },
            {
              "code": "UK",
              "description": "CO<sub>2</sub> model of the United Kingdom.",
              "currency": "GBP",
              "enabled": true
            },
            {
              "code": "US",
              "description": "CO<sub>2</sub> model of the United States of America.",
              "currency": "USD",
              "enabled": false
            }
          ]
        }
      },
      "CategorySystemListExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [
            {
              "code": "ECOLYTIQ",
              "description": "The ecolytiq category system",
              "enabled": true
            },
            {
              "code": "FTS",
              "description": "The FintecSystems category system",
              "enabled": false
            },
            {
              "code": "MCC",
              "description": "Merchant Category Codes",
              "enabled": true
            },
            {
              "code": "ECOLYTIQ_V2",
              "description": "ecolytiq EEIO",
              "enabled": true
            }
          ]
        }
      },
      "CategoryListExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [
            {
              "category": "ex:misc.groceries",
              "system": "ECOLYTIQ",
              "description": "Category for groceries"
            },
            {
              "category": "ex:misc",
              "system": "ECOLYTIQ",
              "description": "General"
            },
            {
              "category": "ex:food.groceries",
              "system": "ECOLYTIQ_V2",
              "description": "Category for groceries"
            },
            {
              "category": "ex:general",
              "system": "ECOLYTIQ_V2",
              "description": "General"
            }
          ]
        }
      },
      "ComparableResponseExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [
            {
              "id": "02805b59-878d-438d-a68b-9d721766ec60",
              "categories": [
                {
                  "system": "ECOLYTIQ_V2",
                  "value": "ex:general"
                },
                {
                  "system": "ECOLYTIQ_V2",
                  "value": "ex:food.groceries"
                },
                {
                  "system": "ECOLYTIQ",
                  "value": "ex:misc"
                },
                {
                  "system": "ECOLYTIQ_V2",
                  "value": "ex:food.groceries"
                }
              ],
              "content": [
                {
                  "language_code": "de",
                  "text": "Das entspricht 14 Paketlieferungen."
                },
                {
                  "language_code": "en",
                  "text": "Equal to 14 parcel deliveries."
                }
              ]
            },
            {
              "id": "0c21d5d2-9992-4d97-ae0f-713af30e1165",
              "categories": [
                {
                  "system": "ECOLYTIQ_V2",
                  "value": "ex:general"
                },
                {
                  "system": "ECOLYTIQ_V2",
                  "value": "ex:food.groceries"
                },
                {
                  "system": "ECOLYTIQ",
                  "value": "ex:misc"
                },
                {
                  "system": "ECOLYTIQ_V2",
                  "value": "ex:food.groceries"
                }
              ],
              "content": [
                {
                  "language_code": "de",
                  "text": "Das entspricht einem Kurzstreckenflug von 2 Kilometern."
                },
                {
                  "language_code": "en",
                  "text": "Equal to a short-distance flight of 2 kilometres."
                }
              ]
            }
          ],
          "errors": []
        }
      },
      "RefinementsUnavailableResponseExample": {
        "value": {
          "request_id": "afb21a0fa3446220",
          "results": [],
          "errors": []
        }
      },
      "RefinementsUnansweredResponseExample": {
        "value": {
          "request_id": "ce359f490283d703",
          "results": [
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "question_id": "9ce39d4f-cb36-4e93-b896-822156c9c159",
              "answer_id": "null",
              "input": "null"
            },
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "question_id": "cf4bd26e-c1e6-40d5-8825-e12c0246a5d5",
              "answer_id": "null",
              "input": "null"
            },
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "question_id": "a94bc4b7-2664-43d3-97ee-1556bc6674ab",
              "answer_id": "null",
              "input": "null"
            }
          ],
          "errors": []
        }
      },
      "RefinementsAnsweredResponseExample": {
        "value": {
          "request_id": "ce9904cad20e303d",
          "results": [
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "question_id": "9ce39d4f-cb36-4e93-b896-822156c9c159",
              "answer_id": "2f085fa7-aceb-4e35-9da5-cb39f8a46fca",
              "input": "null"
            },
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "question_id": "cf4bd26e-c1e6-40d5-8825-e12c0246a5d5",
              "answer_id": "152a69f0-c6ff-4f7b-bfac-fe6e92773188",
              "input": "null"
            },
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "question_id": "a94bc4b7-2664-43d3-97ee-1556bc6674ab",
              "answer_id": "a8c60936-c821-48c6-8975-9f209423d9d9",
              "input": "null"
            }
          ],
          "errors": []
        }
      },
      "RefinementsAnswerFlightsRequestExample": {
        "value": {
          "transactions": [
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "answer_id": "2f085fa7-aceb-4e35-9da5-cb39f8a46fca"
            },
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "answer_id": "152a69f0-c6ff-4f7b-bfac-fe6e92773188"
            },
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "answer_id": "a8c60936-c821-48c6-8975-9f209423d9d9"
            }
          ]
        }
      },
      "RefinementsAnswerFlightsResponseExample": {
        "value": {
          "request_id": "71fb58b24f4180cf",
          "results": [
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "category": {
                "value": "ex:transport.flight",
                "system": "ECOLYTIQ_V2"
              },
              "co2_footprint": {
                "value": 2120016,
                "unit": "g"
              }
            }
          ],
          "errors": []
        }
      },
      "ProfileRefinementsForAccountResponseExample": {
        "value": {
          "refinements": [
            {
              "question_id": "6b988e5a-5540-42d5-a0a7-d24ff054c2f9",
              "answer_id": "9d1d0a2b-597b-4608-8371-9af6e178c969",
              "input": "12"
            },
            {
              "question_id": "4f8d7bdf-6906-4680-a1d8-b05468b3e530",
              "answer_id": "0d1d0a2b-597b-4608-8371-9af6e178c969"
            }
          ]
        }
      },
      "ProfileRefinementsForAccountEmptyResponseExample": {
        "value": {
          "refinements": []
        }
      },
      "InsightsResponseExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [
            {
              "id": "06462ed4-32e7-46b0-8920-31e982ba22c0",
              "categories": [
                {
                  "system": "ECOLYTIQ_V2",
                  "value": "ex:transport.flight"
                },
                {
                  "system": "ECOLYTIQ",
                  "value": "ex:transport.flight"
                }
              ],
              "content": [
                {
                  "language_code": "de",
                  "title": "Ein einfacher Tipp für mehr Nachhaltigkeit!",
                  "text": "Die Wahl näher gelegener Urlaubsziele und Videokonferenzen statt Geschäftsreisen kann Flugreisen unnötig und nachhaltiger machen!"
                },
                {
                  "language_code": "en",
                  "title": "An easy tip to become more sustainable!",
                  "text": "Choosing closer holiday destinations and video conferences over business trips can make air travel unnecessary and more sustainable!"
                }
              ]
            },
            {
              "id": "1b265b3b-d3b6-4e37-9f55-8c1632dc379e",
              "categories": [
                {
                  "system": "ECOLYTIQ_V2",
                  "value": "ex:misc.travel"
                },
                {
                  "system": "ECOLYTIQ",
                  "value": "ex:misc.travel"
                }
              ],
              "content": [
                {
                  "language_code": "de",
                  "title": "Ein toller Tipp, um beim Autofahren Geld zu sparen!",
                  "text": "Willst du etwas Energie und Geld sparen, während du fährst? Hier sind ein paar Tipps: achte auf den richtigen Reifendruck, vermeide unnötiges Gewicht im Auto, schalte früh und fahre nicht zu schnell."
                },
                {
                  "language_code": "en",
                  "title": "A great tip to save money while driving!",
                  "text": "Want to save up some energy and money while you drive? Here are some tips: pay attention to the correct tire pressure, don't carry unnecessary weight in the car, shift gears early, and don't drive too fast."
                }
              ]
            }
          ],
          "errors": []
        }
      },
      "CommonErrorResponseTranslationNotFoundExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [],
          "errors": [
            {
              "id": "06462ed4-32e7-46b0-8920-31e982ba22c0",
              "code": "NOT_FOUND",
              "description": "No translation for language it found."
            }
          ]
        }
      },
      "InsightErrorResponseInsightNotFoundExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [],
          "errors": [
            {
              "id": "06462ed4-32e7-46b0-8920-31e982ba22c0",
              "code": "NOT_FOUND",
              "description": "Insight does not exist."
            }
          ]
        }
      },
      "InsightErrorResponseCategoryNotFoundExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [],
          "errors": [
            {
              "code": "NOT_FOUND",
              "description": "Category ex:misc.unknown for system ECOLYTIQ_V2 does not have any insights, or does not exist."
            }
          ]
        }
      },
      "InsightErrorResponseAnyInsightsNotFoundExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [],
          "errors": [
            {
              "code": "NOT_FOUND",
              "description": "Unable to find any insight that fits your request."
            }
          ]
        }
      },
      "ComparableErrorResponseComparableNotFoundExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [],
          "errors": [
            {
              "id": "06462ed4-32e7-46b0-8920-31e982ba22c0",
              "code": "NOT_FOUND",
              "description": "Comparable does not exist."
            }
          ]
        }
      },
      "ComparableErrorResponseCo2FootprintIncompatibleExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [],
          "errors": [
            {
              "id": "06462ed4-32e7-46b0-8920-31e982ba22c0",
              "code": "INCOMPATIBLE",
              "description": "Comparable is incompatible with given co2 footprint of 50000 grams."
            }
          ]
        }
      },
      "ComparableErrorResponseCategoryNotFoundExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [],
          "errors": [
            {
              "code": "NOT_FOUND",
              "description": "Category ex:misc.unknown for system ECOLYTIQ_V2 does not have any comparables, or does not exist."
            }
          ]
        }
      },
      "ComparableErrorResponseAnyComparablesNotFoundExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [],
          "errors": [
            {
              "code": "NOT_FOUND",
              "description": "Unable to find any comparables that fits your request."
            }
          ]
        }
      },
      "ExplanationErrorResponseExplanationNotFoundExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [],
          "errors": [
            {
              "id": "06462ed4-32e7-46b0-8920-31e982ba22c0",
              "code": "NOT_FOUND",
              "description": "Explanation does not exist."
            }
          ]
        }
      },
      "ExplanationErrorResponseCategoryNotFoundExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [],
          "errors": [
            {
              "code": "NOT_FOUND",
              "description": "Category ex:misc.unknown for system ECOLYTIQ_V2 does not have any explanations, or does not exist."
            }
          ]
        }
      },
      "ExplanationErrorResponseAnyExplanationsNotFoundExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [],
          "errors": [
            {
              "code": "NOT_FOUND",
              "description": "Unable to find any explanation that fits your request."
            }
          ]
        }
      },
      "ContextualInsightsResponseExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [
            {
              "id": "4573f579-6173-439d-9489-72dd3d69f7d7",
              "parameters": [
                {
                  "parameter": "percent",
                  "value": "94.15"
                }
              ],
              "raw_content": [
                {
                  "language_code": "en",
                  "text": "Because you use green energy, you save {percent} percent on energy."
                }
              ],
              "content": [
                {
                  "language_code": "en",
                  "text": "Because you use green energy, you save 94.15 percent on energy."
                }
              ]
            },
            {
              "id": "e46f0eb1-efab-4407-a408-68c05f380bd8",
              "parameters": [
                {
                  "parameter": "percent",
                  "value": "95"
                }
              ],
              "raw_content": [
                {
                  "language_code": "en",
                  "text": "Because you use solar energy, you save {percent} percent on energy."
                }
              ],
              "content": [
                {
                  "language_code": "en",
                  "text": "Because you use solar energy, you save 95 percent on energy."
                }
              ]
            }
          ],
          "errors": []
        }
      },
      "InsightsProfilingResponseExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [
            {
              "account_id": "06462ed4-32e7-46b0-8920-31e982ba22c0",
              "content_ids": [
                "035657e8-63d1-435a-a202-ef7ce6280093",
                "59501d85-a610-d41f-7bce-46944a0f90fe",
                "06462ed4-32e7-46b0-8920-31e982ba22c0"
              ]
            },
            {
              "account_id": "2dba21bf-649b-400d-b949-99bd6fb7e5a2",
              "content_ids": [
                "035657e8-63d1-435a-a202-ef7ce6280093",
                "59501d85-a610-d41f-7bce-46944a0f90fe"
              ]
            }
          ],
          "errors": []
        }
      },
      "ExplanationResponseExample": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [
            {
              "id": "3f967ccf-8b20-4bee-9879-1174f7a7b250",
              "categories": [
                {
                  "system": "ECOLYTIQ_V2",
                  "value": "ex:shopping.online"
                },
                {
                  "system": "ECOLYTIQ",
                  "value": "ex:shopping.online"
                }
              ],
              "content": [
                {
                  "language_code": "de",
                  "text": "Die Umweltbilanz von Online Einkäufen basiert in unserer Berechnung auf zwei Aspekten.\r\n\r\n1. Der Wert für generellen Konsum / €\r\n2. Der Wert für Lieferungen / € (Amazon)\r\n\r\n1. Beim Onlinekauf eines Produktes beachten wir das CO², das während der Produktion entsteht. Hierfür nutzen wir den Wert unserer Kategorie 'Genereller Konsum'.\r\n\r\n2. Dazu kommen die Emissionen, die durch die Lieferung entstehen. Hierfür nutzen wir Amazon Daten, da Amazon ein großer Repräsentant des Onlinehandels ist.\r\n\r\nEs ist wichtig anzumerken, dass ein Onlinekauf umweltschonender sein kann als ein persönlicher Einkauf, allerdings ist in dieser Kategorie sowohl die Emission für das Produkt, als auch für die Lieferung repräsentiert, während z.B. die Fahrt zum Geschäft und der dafür genutzte Treibstoff bei einem Offlinekauf in mehrere Kategorien aufgeteilt ist."
                },
                {
                  "language_code": "en",
                  "text": "The footprint of online shopping in our calculation is based on two aspects.\r\n\r\n1. Value for general consumption / €\r\n2. Value for delivery / € (Amazon)\r\n\r\n1. In purchasing an item online we need to regard the amount of CO² that was necessary for the production, as referred to in our category 'general consumption'.\r\n\r\n2. On top of this general consumption value we have the process of delivering the package to your doorstep. We use Amazon data for this, as they are the major representative for deliveries.\r\n\r\nGenerally speaking, an online delivery can be more sustainable than a purchase in person. In our calculation for online shopping the value is higher than in general consumption. However, if you take your car to drive to the store and buy the same product, you are likely to have a larger footprint for the added fuel and car use."
                }
              ]
            }
          ],
          "errors": []
        }
      },
      "BadRequestRefinements-Example": {
        "value": {
          "timestamp": "2022-12-02T15:40:48.413+00:00",
          "status": 400,
          "error": "Bad Request",
          "path": "/transactions/v1/refinements"
        }
      },
      "BadRequest-Example": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "error_code": "invalid.request",
          "error_description": "Size of transaction list must be between 1 and 500. But is null."
        }
      },
      "BadRequestGetAggregatedCo2ByMonth-Example": {
        "value": {
          "request_id": "6bf3202ade4a5642",
          "error_code": "Invalid request",
          "error_description": "The sub-category may not be blank!"
        }
      },
      "MetaCategoryMayNotBlank-Example": {
        "value": {
          "request_id": "6bf320ashe4a7563",
          "error_code": "Invalid request",
          "error_description": "The meta-category may not be blank!"
        }
      },
      "DateRangeTooLarge-Example": {
        "value": {
          "request_id": "6bf320ashe4a7563",
          "error_code": "Invalid request",
          "error_description": "The date range may not exceed 100 years."
        }
      },
      "NotFoundGetAggregatedCo2ByMonth-Meta-Sub-Example": {
        "value": {
          "request_id": "3f52479xae4a7411",
          "error_code": "not.found",
          "error_description": "The combination of meta-category: 'shopping' and sub-category: 'clothe' not found."
        }
      },
      "NotFoundGetAggregatedCo2ByMonth-Meta-Example": {
        "value": {
          "request_id": "3f52479xae4a7411",
          "error_code": "not.found",
          "error_description": "The meta-category: 'shoppings' not found."
        }
      },
      "BadRequestGetAggregatedCo2ByMonth-Sub-Without-Meta-Example": {
        "value": {
          "request_id": "3f52479xae4a7411",
          "error_code": "Invalid Request",
          "error_description": "Given sub-category: 'taxi', meta-category may not be blank!"
        }
      },
      "MetaForSystemNotFoundExample": {
        "value": {
          "request_id": "7ujr49ae4a14236",
          "error_code": "NOT_FOUND",
          "error_description": "meta-category 'material' for system 'ECOLYTIQ_V2' not found."
        }
      },
      "MetaNotFoundExample": {
        "value": {
          "request_id": "7ujr49ae4a14236",
          "error_code": "NOT_FOUND",
          "error_description": "meta-category 'foods' for system 'ECOLYTIQ_V2' not found."
        }
      },
      "AccessDenied403": {
        "value": {
          "request_id": "1754sadf6721547",
          "error_code": "PERMISSION_DENIED",
          "error_description": "Access denied"
        }
      },
      "Transaction-Request-Example-Retail": {
        "value": {
          "transactions": [
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "account_id": "a083e879-b37c-4307-9407-a9825d82800b",
              "category": {
                "system": "ECOLYTIQ_V2",
                "value": "ex:transport.flight"
              },
              "co2_model": "DE",
              "amount": {
                "value": -2854,
                "currency_code": "EUR"
              },
              "datetime": "2022-05-15T14:18:34Z"
            },
            {
              "transaction_id": "fa2e6d26-fb0f-49f5-bc8d-ccedbc1ca084",
              "account_id": "a083e879-b37c-4307-9407-a9825d82800b",
              "category": {
                "system": "ECOLYTIQ_V2",
                "value": "ex:transport.servicestations"
              },
              "amount": {
                "value": -192.6,
                "currency_code": "EUR"
              },
              "co2_model": "DE",
              "datetime": "2022-09-05T11:18:34Z"
            }
          ]
        }
      },
      "Transaction-Request-Example-Commercial": {
        "value": {
          "transactions": [
            {
              "transaction_id": "87b170fb-4974-4d0e-9733-a429373d86ce",
              "account_id": "a083e879-b37c-4307-9407-a9825d82800b",
              "business_id": "1f061f83-961e-4617-97fd-02372b9aa613",
              "sub_account_id": "12760c06-b928-4ddb-911b-01d1e3e4eb28",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:businesstravel.air"
              },
              "co2_model": "DE_COMMERCIAL",
              "amount": {
                "value": -2854,
                "currency_code": "EUR"
              },
              "datetime": "2023-04-12T10:11:19Z"
            },
            {
              "transaction_id": "010f1516-a98a-4934-b49d-edf074e1bece",
              "account_id": "a083e879-b37c-4307-9407-a9825d82800b",
              "business_id": "1f061f83-961e-4617-97fd-02372b9aa613",
              "sub_account_id": "12760c06-b928-4ddb-911b-01d1e3e4eb28",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:material.books"
              },
              "amount": {
                "value": -192.6,
                "currency_code": "EUR"
              },
              "co2_model": "DE_COMMERCIAL",
              "datetime": "2023-07-25T14:12:14Z"
            }
          ]
        }
      },
      "Transaction-Request-Example-Merchant": {
        "value": {
          "transactions": [
            {
              "transaction_id": "d042df14-c1a8-4bd4-9a3f-5a67826aaebe",
              "account_id": "10547323-5594-45a7-a58f-3b8618770b7c",
              "category": {
                "system": "MCC",
                "value": "5422"
              },
              "co2_model": "DE",
              "amount": {
                "value": -20.59,
                "currency_code": "EUR"
              },
              "datetime": "2021-01-17T12:45:00Z",
              "merchant": {
                "name": "Fancy Supermarket",
                "address": {
                  "city": "Berlin",
                  "country_code": "DE"
                }
              }
            },
            {
              "transaction_id": "c5ae3fdb-73f9-4707-bdfa-98ee8a132322",
              "account_id": "10547323-5594-45a7-a58f-3b8618770b7c",
              "category": {
                "system": "MCC",
                "value": "5021"
              },
              "co2_model": "DE",
              "amount": {
                "value": -20.59,
                "currency_code": "EUR"
              },
              "datetime": "2021-01-17T12:45:00Z",
              "merchant": {
                "name": "Fancy Supermarket",
                "address": {
                  "city": "London",
                  "country_code": "GB"
                }
              }
            }
          ]
        }
      },
      "Transaction-Request-Example-Async": {
        "value": {
          "async": true,
          "transactions": [
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "account_id": "a083e879-b37c-4307-9407-a9825d82800b",
              "category": {
                "system": "ECOLYTIQ_V2",
                "value": "ex:transport.flight"
              },
              "co2_model": "DE",
              "amount": {
                "value": -2854,
                "currency_code": "EUR"
              },
              "datetime": "2022-05-15T14:18:34Z"
            },
            {
              "transaction_id": "fa2e6d26-fb0f-49f5-bc8d-ccedbc1ca084",
              "account_id": "a083e879-b37c-4307-9407-a9825d82800b",
              "category": {
                "system": "ECOLYTIQ_V2",
                "value": "ex:transport.servicestations"
              },
              "amount": {
                "value": -192.6,
                "currency_code": "EUR"
              },
              "co2_model": "DE",
              "datetime": "2022-09-05T11:18:34Z"
            }
          ]
        }
      },
      "TransactionResponseCurrencyNotSupportedExample": {
        "value": {
          "request_id": "1d2dd5f3b23d3870",
          "results": [],
          "errors": [
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c24",
              "error_code": "CURRENCY_NOT_SUPPORTED",
              "error_description": "Currency SGD is not supported."
            }
          ]
        }
      },
      "TransactionResponseModelNotFoundExample": {
        "value": {
          "request_id": "1d2dd5f3b23d3870",
          "results": [],
          "errors": [
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c24",
              "error_code": "not.found",
              "error_description": "Model DE not found!"
            }
          ]
        }
      },
      "TransactionResponseCifNotFoundExample": {
        "value": {
          "request_id": "1d2dd5f3b23d3870",
          "results": [],
          "errors": [
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c24",
              "error_code": "not.found",
              "error_description": "Carbon intensity factor for model DE and category ex:living.energy not found!"
            }
          ]
        }
      },
      "Transaction-Response-Example-200-Retail": {
        "value": {
          "request_id": "1d2dd5f3b23d3870",
          "results": [
            {
              "transaction_id": "62c12ecc-17d7-469f-9ecc-b08e00eb8c90",
              "category": {
                "value": "ex:transport.flight",
                "system": "ECOLYTIQ_V2"
              },
              "co2_footprint": {
                "value": 4269584,
                "unit": "g"
              }
            },
            {
              "transaction_id": "fa2e6d26-fb0f-49f5-bc8d-ccedbc1ca084",
              "category": {
                "value": "ex:transport.servicestations",
                "system": "ECOLYTIQ_V2"
              },
              "co2_footprint": {
                "value": 267907,
                "unit": "g"
              }
            }
          ],
          "errors": []
        }
      },
      "Transaction-Response-Example-200-Commercial": {
        "value": {
          "request_id": "1d2dd5f3b23d3870",
          "results": [
            {
              "transaction_id": "87b170fb-4974-4d0e-9733-a429373d86ce",
              "category": {
                "value": "ex:businesstravel.air",
                "system": "ECOLYTIQ_COMMERCIAL_V1"
              },
              "co2_footprint": {
                "value": 2166129,
                "unit": "g"
              }
            },
            {
              "transaction_id": "010f1516-a98a-4934-b49d-edf074e1bece",
              "category": {
                "value": "ex:material.books",
                "system": "ECOLYTIQ_COMMERCIAL_V1"
              },
              "co2_footprint": {
                "value": 32673,
                "unit": "g"
              }
            }
          ],
          "errors": []
        }
      },
      "Transaction-Response-Example-200-With-Merchant": {
        "value": {
          "request_id": "1d2dd5f3b23d3870",
          "results": [
            {
              "transaction_id": "d042df14-c1a8-4bd4-9a3f-5a67826aaebe",
              "category": {
                "value": "ex:food.groceries",
                "system": "ECOLYTIQ_V2"
              },
              "co2_footprint": {
                "value": 8854,
                "unit": "g"
              }
            },
            {
              "transaction_id": "c5ae3fdb-73f9-4707-bdfa-98ee8a132322",
              "category": {
                "value": "ex:shopping.furniture",
                "system": "ECOLYTIQ_V2"
              },
              "co2_footprint": {
                "value": 2574,
                "unit": "g"
              }
            }
          ],
          "errors": []
        }
      },
      "Transaction-Response-Example-202-Accepted": {
        "value": {
          "request_id": "f90b728d538cf847"
        }
      },
      "GetAllTransactionsExample": {
        "value": {
          "transactions": [
            {
              "transaction_id": "e63c583c-2596-4cbd-aece-fb42096638e0",
              "created_at": "2023-06-01T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:administration.accounting"
              },
              "merchant_name": "Tech Innovations",
              "amount": {
                "value": -270.25,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 23573
            },
            {
              "transaction_id": "3b862583-0399-4a5d-ba89-101590cb1f07",
              "created_at": "2023-06-03T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:businesstravel.hotel"
              },
              "merchant_name": "Wanderlust Travels",
              "amount": {
                "value": -704.9,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 38663
            },
            {
              "transaction_id": "20289e8d-e596-4849-ad5e-a3eda9cc456a",
              "created_at": "2023-06-05T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:equipment.furniture"
              },
              "merchant_name": "MarketPlace Retail",
              "amount": {
                "value": -396.65,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 65723
            },
            {
              "transaction_id": "52f22879-6856-4e39-86bd-ab4f9825397d",
              "created_at": "2023-06-11T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:general.recreational"
              },
              "merchant_name": "Active Life Center",
              "amount": {
                "value": -341.23,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 13605
            },
            {
              "transaction_id": "db165b73-beaa-4360-a526-3207190eca08",
              "created_at": "2023-06-12T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:material.metal"
              },
              "merchant_name": "Tech Innovations",
              "amount": {
                "value": -5850.41,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 27030
            },
            {
              "transaction_id": "c4a10226-2432-4b91-b826-f7dcb2706891",
              "created_at": "2023-06-25T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:personnel.foodevents"
              },
              "merchant_name": "Starlight Cafe & Bakery",
              "amount": {
                "value": -2068.31,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 79746
            },
            {
              "transaction_id": "a25467fe-e695-4db8-a9f9-1a03d2db1213",
              "created_at": "2023-06-28T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:utilities.water"
              },
              "merchant_name": "Everyday Essentials",
              "amount": {
                "value": -96.23,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 47389
            }
          ]
        }
      },
      "GetMetaCategoryTransactionsExample": {
        "value": {
          "transactions": [
            {
              "transaction_id": "e63c583c-2596-4cbd-aece-fb42096638e0",
              "created_at": "2023-06-01T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:administration.accounting"
              },
              "merchant_name": "Tech Innovations",
              "amount": {
                "value": -1024.45,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 23573
            },
            {
              "transaction_id": "3b862583-0399-4a5d-ba89-101590cb1f07",
              "created_at": "2023-06-05T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:administration.constructionservices"
              },
              "merchant_name": "Tech Innovations",
              "amount": {
                "value": -72.49,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 38663
            },
            {
              "transaction_id": "20289e8d-e596-4849-ad5e-a3eda9cc456a",
              "created_at": "2023-06-13T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:administration.financialintermediation"
              },
              "merchant_name": "Tech Innovations",
              "amount": {
                "value": -77.72,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 65723
            },
            {
              "transaction_id": "52f22879-6856-4e39-86bd-ab4f9825397d",
              "created_at": "2023-06-18T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:administration.health"
              },
              "merchant_name": "Tech Innovations",
              "amount": {
                "value": -5037.89,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 13605
            },
            {
              "transaction_id": "db165b73-beaa-4360-a526-3207190eca08",
              "created_at": "2023-06-21T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:administration.leasing"
              },
              "merchant_name": "Tech Innovations",
              "amount": {
                "value": -3200.74,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 27030
            },
            {
              "transaction_id": "c4a10226-2432-4b91-b826-f7dcb2706891",
              "created_at": "2023-06-25T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:administration.legal"
              },
              "merchant_name": "Tech Innovations",
              "amount": {
                "value": -38.04,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 79746
            }
          ]
        }
      },
      "GetSubCategoryTransactionsExample": {
        "value": {
          "transactions": [
            {
              "transaction_id": "e63c583c-2596-4cbd-aece-fb42096638e0",
              "created_at": "2023-06-01T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:administration.accounting"
              },
              "merchant_name": "Tech Innovations",
              "amount": {
                "value": -760.06,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 23573
            },
            {
              "transaction_id": "3b862583-0399-4a5d-ba89-101590cb1f07",
              "created_at": "2023-06-04T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:administration.accounting"
              },
              "merchant_name": "Tech Innovations",
              "amount": {
                "value": -735.3,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 38663
            },
            {
              "transaction_id": "20289e8d-e596-4849-ad5e-a3eda9cc456a",
              "created_at": "2023-06-23T18:43:26.000Z",
              "category": {
                "system": "ECOLYTIQ_COMMERCIAL_V1",
                "value": "ex:administration.accounting"
              },
              "merchant_name": "Tech Innovations",
              "amount": {
                "value": -3513.03,
                "currency_code": "EUR"
              },
              "co2_footprint_in_g": 65723
            }
          ]
        }
      },
      "GetTransactionsEmptyResultExample": {
        "value": {
          "transactions": []
        }
      },
      "Transaction-Category-Update-Request-Example-01": {
        "value": {
          "transactions": [
            {
              "transaction_id": "71b24bdd-8aa4-4b8d-893b-4e74b05a1c98",
              "category": {
                "system": "ECOLYTIQ_V2",
                "value": "ex:general"
              }
            },
            {
              "transaction_id": "fbc78d6b-122b-4ae3-8b5b-50f45230a39f",
              "category": {
                "system": "ECOLYTIQ_V2",
                "value": "ex:food.groceries"
              }
            }
          ]
        }
      },
      "Transaction-Category-Update-Request-Example-02": {
        "value": {
          "async": true,
          "transactions": [
            {
              "transaction_id": "71b24bdd-8aa4-4b8d-893b-4e74b05a1c98",
              "category": {
                "system": "ECOLYTIQ_V2",
                "value": "ex:general"
              }
            },
            {
              "transaction_id": "fbc78d6b-122b-4ae3-8b5b-50f45230a39f",
              "category": {
                "system": "ECOLYTIQ_V2",
                "value": "ex:food.groceries"
              }
            }
          ]
        }
      },
      "Transaction-Category-Update-Response-Example-01": {
        "value": {
          "request_id": "6bf3202ade4a7411",
          "results": [
            {
              "transaction_id": "71b24bdd-8aa4-4b8d-893b-4e74b05a1c98",
              "category": {
                "system": "ECOLYTIQ_V2",
                "value": "ex:general"
              },
              "co2_footprint": {
                "unit": "g",
                "value": 748
              }
            },
            {
              "transaction_id": "fbc78d6b-122b-4ae3-8b5b-50f45230a39f",
              "category": {
                "system": "ECOLYTIQ_V2",
                "value": "ex:food.groceries"
              },
              "co2_footprint": {
                "unit": "g",
                "value": 1260
              }
            }
          ],
          "errors": []
        }
      },
      "Transaction-Category-Update-Response-Example-02": {
        "value": {
          "request_id": "6bf3202ade4a7411"
        }
      },
      "Profile-Refinement-Request-With-IDs-Example": {
        "value": {
          "request_id": "6fb5dbabd12ad92a",
          "results": [
            {
              "id": "6b988e5a-5540-42d5-a0a7-d24ff054c2f9",
              "categories": [
                "ex:food.groceries",
                "ex:food.corner",
                "ex:food.catering",
                "ex:food.cafe"
              ],
              "text": [
                {
                  "language": "de",
                  "text": "Wie ernähren Sie sich?"
                },
                {
                  "language": "en",
                  "text": "How do you describe your diet?"
                }
              ],
              "type": "SELECTABLE",
              "selectable": [
                {
                  "id": "9d1d0a2b-597b-4608-8371-9af6e178c969",
                  "text": [
                    {
                      "language": "de",
                      "text": "viel Fleisch"
                    },
                    {
                      "language": "en",
                      "text": "meat-based"
                    }
                  ]
                },
                {
                  "id": "6d264733-133b-4243-abf2-c932b45c93b0",
                  "text": [
                    {
                      "language": "de",
                      "text": "gemischte Kost"
                    },
                    {
                      "language": "en",
                      "text": "mixed"
                    }
                  ]
                },
                {
                  "id": "476caf88-1714-4b8e-a945-1ceeb8cefe34",
                  "text": [
                    {
                      "language": "de",
                      "text": "wenig Fleisch"
                    },
                    {
                      "language": "en",
                      "text": "reduced meat"
                    }
                  ]
                },
                {
                  "id": "2c270bb0-0e1a-4b7c-846b-f4fcfe5f0fa0",
                  "text": [
                    {
                      "language": "de",
                      "text": "vegetarisch"
                    },
                    {
                      "language": "en",
                      "text": "vegetarian"
                    }
                  ]
                },
                {
                  "id": "0af44297-94dd-4634-a9e3-b75b9850e029",
                  "text": [
                    {
                      "language": "de",
                      "text": "vegan"
                    },
                    {
                      "language": "en",
                      "text": "vegan"
                    }
                  ]
                }
              ]
            },
            {
              "id": "4f8d7bdf-6906-4680-a1d8-b05468b3e530",
              "categories": [],
              "text": [
                {
                  "language": "en",
                  "text": "How many people live in your household?"
                }
              ],
              "type": "INPUT",
              "selectable": [],
              "input": {
                "id": "8948045b-d163-4d03-b9ec-3d5237a4550a",
                "datatype": "INTEGER",
                "validation": [
                  {
                    "name": "GREATER",
                    "condition": "0"
                  }
                ]
              }
            }
          ],
          "errors": []
        }
      },
      "Profile-Answer-Request-Example": {
        "value": {
          "answers": [
            {
              "account_id": "1c974398-4d2b-44fa-b292-64a46c0e6577",
              "answer_id": "9d1d0a2b-597b-4608-8371-9af6e178c969",
              "input": "null"
            },
            {
              "account_id": "1c974398-4d2b-44fa-b292-64a46c0e6577",
              "answer_id": "d112a419-e04a-4c78-bddb-a0e08f4abce9",
              "input": "null"
            },
            {
              "account_id": "1c974398-4d2b-44fa-b292-64a46c0e6577",
              "answer_id": "1453033a-bfc7-466e-9c1e-5b89be22fcff",
              "input": "null"
            },
            {
              "account_id": "1c974398-4d2b-44fa-b292-64a46c0e6577",
              "answer_id": "8948045b-d163-4d03-b9ec-3d5237a4550a",
              "input": "3"
            }
          ]
        }
      },
      "Profile-Answer-Response-Example": {
        "value": {
          "request_id": "55edea99d812cf0f",
          "results": [
            {
              "account_id": "1c974398-4d2b-44fa-b292-64a46c0e6577",
              "question_id": "6b988e5a-5540-42d5-a0a7-d24ff054c2f9",
              "answer_id": "9d1d0a2b-597b-4608-8371-9af6e178c969"
            },
            {
              "account_id": "1c974398-4d2b-44fa-b292-64a46c0e6577",
              "question_id": "d155718a-e3f5-4f4f-845c-90a67f9393f4",
              "answer_id": "d112a419-e04a-4c78-bddb-a0e08f4abce9"
            },
            {
              "account_id": "1c974398-4d2b-44fa-b292-64a46c0e6577",
              "question_id": "dbbad4bf-8599-4e11-b8e0-9f0c17507393",
              "answer_id": "1453033a-bfc7-466e-9c1e-5b89be22fcff"
            },
            {
              "account_id": "1c974398-4d2b-44fa-b292-64a46c0e6577",
              "question_id": "4f8d7bdf-6906-4680-a1d8-b05468b3e530",
              "answer_id": "8948045b-d163-4d03-b9ec-3d5237a4550a"
            }
          ],
          "errors": []
        }
      },
      "Delete-Account-Request-Example": {
        "value": {
          "account_ids": [
            "1c974398-4d2b-44fa-b292-64a46c0e6577"
          ],
          "async": false
        }
      },
      "Delete-Account-Response-Example": {
        "value": {
          "request_id": "520a7db858397ada"
        }
      },
      "BadRequestExample": {
        "value": {
          "timestamp": "2023-04-25T12:34:56.78+00:00",
          "status": 400,
          "error": "Bad Request"
        }
      },
      "GetTotalFootprintAndCreditsExample": {
        "value": {
          "intervals": [
            {
              "co2_footprint_in_g": 8793376,
              "co2_credits_in_g": 412900
            }
          ]
        }
      },
      "GetMonthlyFootprintsAndCreditsExample": {
        "value": {
          "intervals": [
            {
              "year": 2022,
              "month": 7,
              "co2_footprint_in_g": 713850,
              "co2_credits_in_g": 350000
            },
            {
              "year": 2022,
              "month": 8,
              "co2_footprint_in_g": 701468,
              "co2_credits_in_g": 400637
            },
            {
              "year": 2022,
              "month": 9,
              "co2_footprint_in_g": 0,
              "co2_credits_in_g": 120000
            },
            {
              "year": 2022,
              "month": 10,
              "co2_footprint_in_g": 753372,
              "co2_credits_in_g": 0
            },
            {
              "year": 2022,
              "month": 11,
              "co2_footprint_in_g": 779746,
              "co2_credits_in_g": 2364567
            },
            {
              "year": 2022,
              "month": 12,
              "co2_footprint_in_g": 798517,
              "co2_credits_in_g": 0
            },
            {
              "year": 2023,
              "month": 1,
              "co2_footprint_in_g": 727030,
              "co2_credits_in_g": 0
            },
            {
              "year": 2023,
              "month": 2,
              "co2_footprint_in_g": 713605,
              "co2_credits_in_g": 0
            },
            {
              "year": 2023,
              "month": 3,
              "co2_footprint_in_g": 778262,
              "co2_credits_in_g": 0
            },
            {
              "year": 2023,
              "month": 4,
              "co2_footprint_in_g": 682537,
              "co2_credits_in_g": 420000
            },
            {
              "year": 2023,
              "month": 5,
              "co2_footprint_in_g": 0,
              "co2_credits_in_g": 300000
            },
            {
              "year": 2023,
              "month": 6,
              "co2_footprint_in_g": 665723,
              "co2_credits_in_g": 665723
            },
            {
              "year": 2023,
              "month": 7,
              "co2_footprint_in_g": 324000,
              "co2_credits_in_g": 137053
            }
          ]
        }
      },
      "GetAverageFootprintsOnlyModelGivenExample": {
        "value": {
          "national_average_co2_footprint_in_g": 11324583
        }
      },
      "GetAverageFootprintsModelAndAccountGivenExample": {
        "value": {
          "national_average_co2_footprint_in_g": 11324583,
          "industry_average_co2_footprint_in_g": 27462842
        }
      },
      "BadRequestGetAverageFootprints-Example": {
        "value": {
          "request_id": "65135a17e8e8b94b982811e89e37ac71",
          "error_code": "INVALID_ARGUMENT",
          "error_description": "model must not be blank."
        }
      },
      "NotFoundGetAverageFootprints-Example": {
        "value": {
          "request_id": "65135a2970b4052a27b8fe823da66d44",
          "error_code": "NOT_FOUND",
          "error_description": "No averages found for model AB"
        }
      },
      "StructuredFeedbackRequestIdFreetextExample": {
        "value": {
          "account_id": "38fe606a-c3bb-4fdd-b73d-3cb14ff926c9",
          "reference": {
            "insight_id": "66028aaf-5da0-41db-9bb7-fb7fffe4db1b"
          },
          "answer": {
            "answer_id": "fd91e306-5e3c-4fe2-81a2-0fe22717ed21",
            "free_text": "It is too abstract for me. Could you add some examples, to make it more comprehensible?"
          }
        }
      },
      "FeedbackAnswerIdNotFound422Example": {
        "value": {
          "request_id": "0ace338d-38dd-4af2-a9e0-3be40a67ad22",
          "error_code": "UNPROCESSABLE_ENTITY",
          "error_description": "No answer is found with ID: b8bdcc26-a228-4fbd-806d-570dc4df6e00."
        }
      },
      "FeedbackTransactionIdNotFound422Example": {
        "value": {
          "request_id": "5fb15e06-1a9c-42aa-8eb7-7542be0a1fdd",
          "error_code": "UNPROCESSABLE_ENTITY",
          "error_description": "No transaction is found with ID: 3a10fdc6-52a9-4331-bb36-b8ba5121736e"
        }
      },
      "FeedbackInsightIdNotFound422Example": {
        "value": {
          "request_id": "0ace338d-38dd-4af2-a9e0-3be40a67ad22",
          "error_code": "UNPROCESSABLE_ENTITY",
          "error_description": "No insight is found with ID: b8bdcc26-a228-4fbd-806d-570dc4df6e00."
        }
      },
      "FeedbackInvalidReference422Example": {
        "value": {
          "request_id": "0ace338d-38dd-4af2-a9e0-3be40a67ad22",
          "error_code": "UNPROCESSABLE_ENTITY",
          "error_description": "The provided reference is not correct for answer_id: b8bdcc26-a228-4fbd-806d-570dc4df6e00."
        }
      },
      "FeedbackInvalidReference400Example": {
        "value": {
          "request_id": "d224af3c-ee70-467b-bb34-07c7758baeac",
          "error_code": "INVALID_REQUEST",
          "error_description": "Only one of transaction_id: 2988ae98-fa0e-4d1f-827c-21b62dff9de7 or insight_id: eab4cd59-a20a-4215-834e-5dda55c4a9ad should be provided."
        }
      },
      "UnstructuredFeedbackRequestFreetextToBinaryExample": {
        "value": {
          "account_id": "38fe606a-c3bb-4fdd-b73d-3cb14ff926c9",
          "question": "Would you recommend this application to your friends?",
          "answer": {
            "binary_rating": "POSITIVE"
          }
        }
      },
      "UnstructuredFeedbackRequestFreetextToFreetextExample": {
        "value": {
          "account_id": "38fe606a-c3bb-4fdd-b73d-3cb14ff926c9",
          "reference": {
            "transaction_id": "3a10fdc6-52a9-4331-bb36-b8ba5121736e"
          },
          "question": "Would you like to provide additional feedback?",
          "answer": {
            "free_text": "Why is this footprint so much higher compared to a similar return flight I bought two months ago?"
          }
        }
      },
      "CarbonCreditProjectNotFoundExample": {
        "value": {
          "error_code": "NOT_FOUND",
          "error_description": "The requested project does not exist."
        }
      },
      "PurchaseCarbonCreditsRequestExample": {
        "value": {
          "account_id": "1c974398-4d2b-44fa-b292-64a46c0e6577",
          "co2_amount_in_g": 2250,
          "attribution_month": "2023-06"
        }
      },
      "PurchaseCarbonCreditsResponseExample": {
        "value": {
          "checkout_url": "https://checkout.stripe.com/c/pay/cs_test_a11YYufWQzNY63zpQ",
          "order_id": "0df68eda-a491-4dda-9758-ed4b7b05f42c"
        }
      },
      "ActionAccessDenied403": {
        "value": {
          "error_code": "FORBIDDEN",
          "error_description": "Missing privileges to access ecoAction."
        }
      },
      "CarbonCreditProjectsResponseExample": {
        "value": {
          "projects": [
            {
              "id": "5c406074-2fe9-4181-83d9-8dcae764a86b",
              "country": "US",
              "registry_name": "Puro.earth",
              "classification": "AVOIDANCE",
              "images": [
                {
                  "image_url": "https://example.com/image_01.jpg"
                },
                {
                  "image_url": "https://example.com/image_02.jpg"
                }
              ],
              "price_per_kg": {
                "value": 0.025,
                "currency_code": "EUR"
              },
              "translations": [
                {
                  "language_code": "en",
                  "title": "CarbonCapture Direct Air Capture - Project Bison",
                  "description": "CarbonCapture DAC machines that remove CO2 from the atmosphere. Project Bison will be the first mass-scale DAC deployment to use Class VI wells for CO2 storage, and the world's largest single DAC project.",
                  "description_long": "Project Bison was designed to permanently remove CO₂ via direct air capture systems in Wyoming, serving to meet the rapidly growing need for high-quality engineered carbon removal credits.\n\nThe project has been developed to be rolled out over multiple phases through 2030. It consists of a partnership between CarbonCapture Inc., a US climate tech company that makes direct air capture (DAC) systems based on a groundbreaking modular open-systems architecture, and Frontier Carbon Solutions, a carbon storage developer. The partnership will deploy CarbonCapture’s DAC modules atop Frontier’s CO2 transportation and storage infrastructure in Wyoming to permanently remove 5 million tonnes of CO2 from the atmosphere annually by 2030.\n\nDAC refers to technology solutions that filter carbon dioxide directly out of the atmosphere. When air moves over certain materials, they selectively bind to CO2. CarbonCapture uses solid sorbent capture materials, themselves typically composed of common chemicals already in use in other applications. Once CO2 is captured from the atmosphere, heat is applied to release it, regenerating capture materials for another capture cycle. CarbonCapture uses only renewables or other zero-carbon resources to power its systems.\n",
                  "category": "Direct Air Capture",
                  "sustainable_development_goals": [
                    {
                      "id": "15",
                      "description": "Protect, restore and promote sustainable use of terrestrial ecosystems, sustainably manage forests, combat desertification, and halt and reverse land degradation and halt biodiversity loss."
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "schemas": {
      "CategoryCO2Footprint": {
        "type": "object",
        "required": [
          "transaction_count",
          "co2_footprint_in_g",
          "percentage_value"
        ],
        "properties": {
          "meta_category": {
            "type": "string",
            "maxLength": 64,
            "description": "The meta-category of the footprint. Will always be returned if no filter for meta-category has been applied.<br>* Meta-category (e.g. `food`) is part of a category (e.g. `ex:food.cafe`), which is composed of the following structure  `ex:meta-category.sub-category`",
            "example": "administration"
          },
          "category": {
            "type": "string",
            "description": "The category of the footprint. Will always be returned if the filter for meta-category has been applied.",
            "example": "ex:administration.accounting"
          },
          "transaction_count": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 2147483647,
            "description": "The number of transactions in that category.",
            "example": 12
          },
          "co2_footprint_in_g": {
            "$ref": "#/components/schemas/CO2FootprintInG"
          },
          "percentage_value": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 100,
            "description": "The percentage breakdown of a month's footprint for a given category (precise to 3 decimal places).",
            "example": 24.236
          }
        }
      },
      "CO2ModelResponse": {
        "type": "object",
        "required": [
          "request_id",
          "results"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CO2Model"
            }
          }
        }
      },
      "CO2Model": {
        "type": "object",
        "required": [
          "code",
          "description",
          "currency",
          "enabled"
        ],
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 32,
            "description": "Unique code of the CO<sub>2</sub> model.",
            "example": "DE"
          },
          "description": {
            "type": "string",
            "description": "Description of the CO<sub>2</sub> model."
          },
          "currency": {
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "description": "ISO 4217 currency code describing the base currency of the CO<sub>2</sub> model. Other currencies are converted to this currency first.",
            "example": "EUR"
          },
          "enabled": {
            "type": "boolean",
            "description": "True, if the CO<sub>2</sub> model is enabled."
          }
        }
      },
      "CategorySystemListResponse": {
        "type": "object",
        "required": [
          "request_id",
          "results"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategorySystem"
            }
          }
        }
      },
      "CategorySystem": {
        "type": "object",
        "required": [
          "code",
          "enabled"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique code of the category system."
          },
          "description": {
            "type": "string",
            "description": "Description of the category system"
          },
          "enabled": {
            "type": "boolean",
            "description": "True, if the category system is enabled."
          }
        }
      },
      "CategoryListResponse": {
        "type": "object",
        "required": [
          "request_id",
          "results"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDetails"
            }
          }
        }
      },
      "CategoryDetails": {
        "type": "object",
        "required": [
          "category",
          "system"
        ],
        "properties": {
          "category": {
            "type": "string",
            "maxLength": 64,
            "description": "Category value. Unique within the `system` context.",
            "example": "ex:food.groceries"
          },
          "system": {
            "type": "string",
            "maxLength": 32,
            "description": "Category system",
            "example": "ECOLYTIQ_V2"
          },
          "description": {
            "type": "string",
            "description": "Description of the category"
          }
        }
      },
      "RequestId": {
        "type": "string",
        "maxLength": 64,
        "description": "Unique ID to identify the request.",
        "example": "6bf3202ade4a7411"
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time",
        "description": "The time of the occurrence.",
        "example": "2023-04-25T12:34:56.789+00:00"
      },
      "QuestionResponse": {
        "type": "object",
        "required": [
          "request_id",
          "results",
          "errors"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Question"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceError"
            }
          }
        }
      },
      "ContextualInsightsResponse": {
        "type": "object",
        "required": [
          "request_id",
          "results",
          "errors"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContextualInsight"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceError"
            }
          }
        }
      },
      "InsightsResponse": {
        "type": "object",
        "required": [
          "request_id",
          "results",
          "errors"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Insight"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceError"
            }
          }
        }
      },
      "InsightsProfilingResponse": {
        "type": "object",
        "required": [
          "request_id",
          "results",
          "errors"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountInsightMapping"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceError"
            }
          }
        }
      },
      "Insight": {
        "type": "object",
        "required": [
          "id",
          "categories",
          "content"
        ],
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 64,
            "description": "Unique ID to identify the insight.",
            "example": "66028aaf-5da0-41db-9bb7-fb7fffe4db1b"
          },
          "categories": {
            "type": "array",
            "minItems": 1,
            "description": "List of the insight categories.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "content": {
            "type": "array",
            "minItems": 1,
            "description": "List of the insight translations.",
            "items": {
              "$ref": "#/components/schemas/TranslatedInsight"
            }
          }
        }
      },
      "ContextualInsight": {
        "type": "object",
        "required": [
          "id",
          "content",
          "parameters",
          "raw_content"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContextualInsightParameter"
            }
          },
          "raw_content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TranslatedContextualInsight"
            }
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TranslatedContextualInsight"
            }
          }
        }
      },
      "ContextualInsightParameter": {
        "type": "object",
        "required": [
          "parameter",
          "value"
        ],
        "properties": {
          "parameter": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "AccountInsightMapping": {
        "type": "object",
        "required": [
          "account_id",
          "content_ids"
        ],
        "properties": {
          "account_id": {
            "type": "string",
            "description": "The ID of the account holder/user."
          },
          "content_ids": {
            "type": "array",
            "description": "List of content IDs. Use the \"Get Insights by IDs\" endpoint to fetch the insight(s).",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExplanationsResponse": {
        "type": "object",
        "required": [
          "request_id",
          "results",
          "errors"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "results": {
            "type": "array",
            "description": "List of explanations.",
            "items": {
              "$ref": "#/components/schemas/Explanation"
            }
          },
          "errors": {
            "type": "array",
            "description": "List of request errors.",
            "items": {
              "$ref": "#/components/schemas/ResourceError"
            }
          }
        }
      },
      "Explanation": {
        "type": "object",
        "required": [
          "id",
          "categories",
          "content"
        ],
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 64,
            "description": "Unique ID to identify the explanation.",
            "example": "addaaaa6-167d-43d4-9e35-175dca9816c3"
          },
          "categories": {
            "type": "array",
            "minItems": 1,
            "description": "List of the explanation categories.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "content": {
            "type": "array",
            "minItems": 1,
            "description": "List of the explanation translations.",
            "items": {
              "$ref": "#/components/schemas/TranslatedExplanation"
            }
          }
        }
      },
      "ComparableResponse": {
        "type": "object",
        "required": [
          "request_id",
          "results",
          "errors"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "results": {
            "type": "array",
            "description": "List of comparables.",
            "items": {
              "$ref": "#/components/schemas/Comparable"
            }
          },
          "errors": {
            "type": "array",
            "description": "List of request errors.",
            "items": {
              "$ref": "#/components/schemas/ResourceError"
            }
          }
        }
      },
      "ResourceError": {
        "type": "object",
        "required": [
          "code",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the resource that caused the error, if present"
          },
          "code": {
            "type": "string",
            "description": "Identifies the type of error. See all used codes in [ecolytiq Error Code Summary](#tag/Errors/ecolytiq-Error-Code-Summary)"
          },
          "description": {
            "type": "string",
            "description": "Human readable error description"
          }
        }
      },
      "Comparable": {
        "type": "object",
        "required": [
          "id",
          "categories",
          "content"
        ],
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 64,
            "description": "Unique ID to identify the comparable.",
            "example": "12bb4050-b4db-42e5-924f-6fa4cc336e19"
          },
          "categories": {
            "type": "array",
            "minItems": 1,
            "description": "List of the comparable categories.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "content": {
            "type": "array",
            "minItems": 1,
            "description": "List of the comparable translations.",
            "items": {
              "$ref": "#/components/schemas/TranslatedComparable"
            }
          }
        }
      },
      "ApiError": {
        "description": "Error messages for API clients.\n",
        "type": "object",
        "required": [
          "request_id",
          "error_code",
          "error_description"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "error_code": {
            "type": "string",
            "description": "The error status code.",
            "example": "not.found"
          },
          "error_description": {
            "type": "string",
            "description": "The error description.",
            "example": "Category ex:food.groceries for system ECOLYTIQ_V2 not found."
          }
        }
      },
      "ApiValidationError": {
        "description": "Error messages for API clients.\n",
        "type": "object",
        "required": [
          "timestamp",
          "status",
          "error",
          "path"
        ],
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "minimum": 100,
            "maximum": 599,
            "description": "The HTTP status code.",
            "example": 400
          },
          "error": {
            "type": "string",
            "description": "The HTTP status described.",
            "example": "Bad request"
          },
          "path": {
            "type": "string",
            "description": "The URL where the error occurred.",
            "example": "/content/v1/comparables"
          }
        }
      },
      "TransactionRequest": {
        "description": "The complete list of transactions",
        "type": "object",
        "required": [
          "transactions"
        ],
        "properties": {
          "async": {
            "type": "boolean",
            "description": "true, if the request should be processed asynchronously"
          },
          "transactions": {
            "type": "array",
            "minItems": 1,
            "maxItems": 2500,
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "TransactionCategoryUpdateRequest": {
        "description": "The list of categories of transactions that should e updated",
        "type": "object",
        "required": [
          "transactions"
        ],
        "properties": {
          "async": {
            "type": "boolean",
            "description": "true, if the request should be processed asynchronously"
          },
          "transactions": {
            "type": "array",
            "minItems": 1,
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/TransactionCategoryUpdate"
            }
          }
        }
      },
      "CO2FootprintInG": {
        "type": "integer",
        "format": "int64",
        "minimum": 0,
        "maximum": 9223372036854776000,
        "description": "CO<sub>2</sub> footprint in grams.",
        "example": 132123
      },
      "CO2CreditsInG": {
        "type": "integer",
        "format": "int64",
        "minimum": 0,
        "maximum": 9223372036854776000,
        "description": "CO<sub>2</sub> credits in grams.",
        "example": 54982
      },
      "GetFootprintsForMonthResponse": {
        "type": "object",
        "required": [
          "categories"
        ],
        "properties": {
          "categories": {
            "type": "array",
            "description": "List of CO<sub>2</sub> categories.",
            "items": {
              "$ref": "#/components/schemas/CategoryCO2Footprint"
            }
          }
        }
      },
      "GetFootprintsAndCreditsOverTimeResponse": {
        "type": "object",
        "required": [
          "intervals"
        ],
        "properties": {
          "intervals": {
            "type": "array",
            "minItems": 0,
            "description": "List of monthly CO<sub>2</sub> footprints and credits",
            "items": {
              "$ref": "#/components/schemas/MonthlyCO2FootprintAndCredits"
            }
          }
        }
      },
      "MonthlyCO2FootprintAndCredits": {
        "type": "object",
        "required": [
          "co2_footprint_in_g",
          "co2_credits_in_g"
        ],
        "properties": {
          "year": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 2147483647,
            "description": "The year of the interval. If not given the result refers to the whole interval.",
            "example": 2023
          },
          "month": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 12,
            "description": "The month of the interval. If not given the result refers to the specified year.",
            "example": 1
          },
          "co2_footprint_in_g": {
            "$ref": "#/components/schemas/CO2FootprintInG"
          },
          "co2_credits_in_g": {
            "$ref": "#/components/schemas/CO2CreditsInG"
          }
        }
      },
      "CO2Footprint": {
        "description": "CO2Footprint object\n",
        "type": "object",
        "required": [
          "value",
          "unit"
        ],
        "properties": {
          "value": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "maximum": 9223372036854776000,
            "description": "Value of CO<sub>2</sub> footprint",
            "example": 10
          },
          "unit": {
            "type": "string",
            "description": "Unit of CO<sub>2</sub> footprint",
            "enum": [
              "g",
              "kg"
            ],
            "example": "g"
          }
        }
      },
      "TransactionResponse": {
        "description": "holds information about transactions",
        "type": "object",
        "required": [
          "request_id",
          "results",
          "errors"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "results": {
            "type": "array",
            "minItems": 0,
            "description": "List of successful transactions",
            "items": {
              "$ref": "#/components/schemas/TransactionResult"
            }
          },
          "errors": {
            "type": "array",
            "minItems": 0,
            "description": "List of unsuccessful transactions",
            "items": {
              "$ref": "#/components/schemas/TransactionError"
            }
          }
        }
      },
      "TransactionRefinementResponse": {
        "description": "holds information about transactions",
        "type": "object",
        "required": [
          "request_id",
          "results",
          "errors"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionResult"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionError"
            }
          }
        }
      },
      "TransactionAsyncResponse": {
        "description": "holds information about invalid transactions",
        "type": "object",
        "required": [
          "request_id"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          }
        }
      },
      "TransactionResult": {
        "description": "holds information about valid transactions",
        "type": "object",
        "required": [
          "transaction_id",
          "category",
          "co2_footprint"
        ],
        "properties": {
          "transaction_id": {
            "$ref": "#/components/schemas/TransactionId"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "co2_footprint": {
            "$ref": "#/components/schemas/CO2Footprint"
          }
        }
      },
      "TransactionDetailResult": {
        "type": "object",
        "required": [
          "transaction_id",
          "created_at",
          "category",
          "amount",
          "co2_footprint_in_g"
        ],
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "identifies a transaction",
            "maxLength": 64,
            "example": "74263e87-93cb-46be-a132-9cd260716f07"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp of the transaction at ecolytiq. Format according to ISO 8601.",
            "example": "2023-06-01T18:43:26.000Z"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "merchant_name": {
            "type": "string",
            "maxLength": 2048,
            "description": "Name of the merchant of the transaction.",
            "example": "SwiftMart Electronics"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "co2_footprint_in_g": {
            "$ref": "#/components/schemas/CO2FootprintInG"
          }
        }
      },
      "GetTransactionsForMonthResponse": {
        "type": "object",
        "required": [
          "transactions"
        ],
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDetailResult"
            }
          }
        }
      },
      "TransactionError": {
        "description": "holds information about invalid transactions",
        "type": "object",
        "required": [
          "transaction_id"
        ],
        "properties": {
          "transaction_id": {
            "$ref": "#/components/schemas/TransactionId"
          },
          "error_code": {
            "type": "string"
          },
          "error_description": {
            "type": "string"
          }
        }
      },
      "TransactionId": {
        "description": "identifies a transaction",
        "type": "string",
        "maxLength": 64,
        "example": "74263e87-93cb-46be-a132-9cd260716f07"
      },
      "AccountId": {
        "type": "string",
        "maxLength": 64,
        "description": "The ID of the account holder/user. Do not use IDs of sub-accounts, cards or products.",
        "example": "1c974398-4d2b-44fa-b292-64a46c0e6577"
      },
      "BusinessId": {
        "type": "string",
        "maxLength": 64,
        "description": "The ID of the business of a commercial banking user. Mandatory for commercial banking.",
        "example": "e36a9e67-3202-4dfa-883a-838d966e14f3"
      },
      "SubAccountId": {
        "type": "string",
        "maxLength": 64,
        "description": "The ID of the sub-account, card or product of a commercial banking user. Can only be used for commercial banking.",
        "example": "12760c06-b928-4ddb-911b-01d1e3e4eb28"
      },
      "Transaction": {
        "description": "holds information about bank transactions",
        "type": "object",
        "required": [
          "transaction_id",
          "account_id",
          "amount",
          "category",
          "co2_model",
          "datetime"
        ],
        "properties": {
          "transaction_id": {
            "$ref": "#/components/schemas/TransactionId"
          },
          "business_id": {
            "$ref": "#/components/schemas/BusinessId"
          },
          "sub_account_id": {
            "$ref": "#/components/schemas/SubAccountId"
          },
          "account_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "co2_model": {
            "type": "string",
            "maxLength": 32,
            "description": "Unique code of the CO<sub>2</sub> model.",
            "example": "DE"
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the transaction happened.",
            "example": "2022-05-15T14:18:34Z"
          },
          "merchant": {
            "$ref": "#/components/schemas/Merchant"
          },
          "description": {
            "type": "string",
            "maxLength": 400,
            "description": "Purpose / Description of transaction"
          }
        }
      },
      "TransactionCategoryUpdate": {
        "description": "holds information about the transaction and the new category",
        "type": "object",
        "required": [
          "transaction_id",
          "category"
        ],
        "properties": {
          "transaction_id": {
            "$ref": "#/components/schemas/TransactionId"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          }
        }
      },
      "Category": {
        "description": "holds category information\n",
        "type": "object",
        "required": [
          "value",
          "system"
        ],
        "properties": {
          "value": {
            "type": "string",
            "maxLength": 64,
            "description": "Category value",
            "example": "ex:food.groceries"
          },
          "system": {
            "type": "string",
            "maxLength": 32,
            "description": "Category system",
            "example": "ECOLYTIQ_V2"
          }
        }
      },
      "Amount": {
        "description": "Money amount of the transaction.",
        "type": "object",
        "required": [
          "value",
          "currency_code"
        ],
        "properties": {
          "value": {
            "type": "number",
            "description": "Money value of the transaction. Decimal fraction depends on currency and can be between 0 and 3.",
            "maximum": 0,
            "minimum": -1000000000000000,
            "example": -37.5
          },
          "currency_code": {
            "type": "string",
            "description": "ISO 4217 currency code describing the currency of the transaction.",
            "example": "EUR"
          }
        }
      },
      "Merchant": {
        "description": "holds merchant information\n",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 2048,
            "description": "Name of the merchant",
            "example": "SwiftMart Electronics"
          },
          "web": {
            "type": "string",
            "format": "url",
            "maxLength": 2048,
            "description": "Web URL of the merchant",
            "example": "https://www.swiftmart-electronics.com/"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "gps": {
            "$ref": "#/components/schemas/GPS"
          }
        }
      },
      "GPS": {
        "description": "holds geographic coordinates as decimal fractions (decimal places = 6) of a degree.\n",
        "type": "object",
        "required": [
          "latitude",
          "longitude"
        ],
        "properties": {
          "latitude": {
            "type": "number",
            "format": "float",
            "minimum": -90,
            "maximum": 90,
            "description": "Latitude as decimal fractions (decimal places = 6) of a degree",
            "example": 57.6348
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "minimum": -180,
            "maximum": 180,
            "description": "Longitude as decimal fractions (decimal places = 6) of a degree",
            "example": 18.29484
          }
        }
      },
      "Address": {
        "description": "holds address information\n",
        "type": "object",
        "required": [
          "city"
        ],
        "properties": {
          "street": {
            "type": "string",
            "maxLength": 100,
            "description": "Name of the street",
            "example": "Grunerstraße"
          },
          "street_no": {
            "type": "string",
            "maxLength": 40,
            "description": "Street number. Can be also a range",
            "example": 20
          },
          "postal_code": {
            "type": "string",
            "maxLength": 12,
            "description": "Postal code",
            "example": 10179
          },
          "city": {
            "type": "string",
            "maxLength": 180,
            "description": "Name of the City",
            "example": "Berlin"
          },
          "country_code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "description": "ISO 3166 Alpha-2 country code.",
            "example": "DE"
          }
        },
        "example": {
          "street": "Second Street",
          "street_no": 42,
          "postal_code": 11223,
          "city": "Berlin",
          "country_code": "DE"
        }
      },
      "Question": {
        "type": "object",
        "required": [
          "id",
          "type",
          "categories",
          "text",
          "selectable"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ecoyltiq category codes of this question"
          },
          "text": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Translation"
            }
          },
          "type": {
            "$ref": "#/components/schemas/AnswerType"
          },
          "selectable": {
            "description": "List of selectable answers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Answer"
            }
          },
          "input": {
            "$ref": "#/components/schemas/ExpectedAnswerInput"
          }
        }
      },
      "ExpectedAnswerInput": {
        "type": "object",
        "description": "Describes a valid input that can be used as answer.",
        "required": [
          "id",
          "datatype",
          "validation"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "datatype": {
            "type": "string",
            "enum": [
              "STRING",
              "INTEGER",
              "NUMBER"
            ]
          },
          "validation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputValidation"
            }
          }
        }
      },
      "InputValidation": {
        "type": "object",
        "required": [
          "name",
          "condition"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "GREATER",
              "LESS",
              "MIN_LENGTH",
              "MAX_LENGTH"
            ]
          },
          "condition": {
            "type": "string"
          }
        }
      },
      "AnswerType": {
        "type": "string",
        "enum": [
          "SELECTABLE",
          "INPUT"
        ]
      },
      "Answer": {
        "type": "object",
        "required": [
          "id",
          "text"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "text": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Translation"
            }
          }
        }
      },
      "ProfileRefinementsResponse": {
        "type": "object",
        "required": [
          "refinements"
        ],
        "properties": {
          "refinements": {
            "type": "array",
            "description": "A list of profile refinements.",
            "items": {
              "$ref": "#/components/schemas/ProfileRefinementResponseItem"
            }
          }
        }
      },
      "ProfileRefinementResponseItem": {
        "type": "object",
        "required": [
          "question_id",
          "answer_id"
        ],
        "properties": {
          "question_id": {
            "type": "string",
            "example": "6b988e5a-5540-42d5-a0a7-d24ff054c2f9",
            "description": "The ID of the question that was answered."
          },
          "answer_id": {
            "type": "string",
            "example": "9d1d0a2b-597b-4608-8371-9af6e178c969",
            "description": "The ID of the answer that was given."
          },
          "input": {
            "type": "string",
            "example": "12",
            "description": "Additional user input that answers the question, e.g. for the question \"How many vehicles are in your fleet?\""
          }
        }
      },
      "BulkAnswerResponse": {
        "type": "object",
        "required": [
          "request_id",
          "results",
          "errors"
        ],
        "properties": {
          "request_id": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkAnswerResult"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkAnswerError"
            }
          }
        }
      },
      "BulkAnswerResult": {
        "type": "object",
        "required": [
          "account_id",
          "question_id",
          "answer_id"
        ],
        "properties": {
          "account_id": {
            "type": "string"
          },
          "question_id": {
            "type": "string"
          },
          "answer_id": {
            "type": "string"
          }
        }
      },
      "BulkAnswerError": {
        "type": "object",
        "required": [
          "account_id",
          "answer_id",
          "code",
          "description"
        ],
        "properties": {
          "account_id": {
            "type": "string"
          },
          "answer_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "TransactionQuestionsResponse": {
        "type": "object",
        "required": [
          "request_id",
          "results",
          "errors"
        ],
        "properties": {
          "request_id": {
            "type": "string"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionQuestionAnswerResult"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionQuestionAnswerError"
            }
          }
        }
      },
      "TransactionQuestionAnswerResult": {
        "type": "object",
        "required": [
          "transaction_id",
          "question_id"
        ],
        "properties": {
          "transaction_id": {
            "type": "string"
          },
          "question_id": {
            "type": "string"
          },
          "answer_id": {
            "description": "null, if question is not answered",
            "type": "string"
          },
          "input": {
            "description": "null, if question is not answered with an user input",
            "type": "string"
          }
        }
      },
      "TransactionQuestionAnswerError": {
        "type": "object",
        "required": [
          "transaction_id",
          "code",
          "description"
        ],
        "properties": {
          "transaction_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "BulkAnswersRequest": {
        "type": "object",
        "required": [
          "answers"
        ],
        "properties": {
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerRequest"
            }
          }
        }
      },
      "AnswerRequest": {
        "type": "object",
        "required": [
          "account_id",
          "answer_id"
        ],
        "properties": {
          "answer_id": {
            "type": "string"
          },
          "account_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "input": {
            "type": "string",
            "description": "user input"
          }
        }
      },
      "TransactionBulkAnswersRequest": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionAnswerRequest"
            }
          }
        }
      },
      "Translation": {
        "type": "object",
        "required": [
          "language",
          "text"
        ],
        "properties": {
          "language": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "TransactionAnswerRequest": {
        "type": "object",
        "required": [
          "transaction_id",
          "answer_id"
        ],
        "properties": {
          "answer_id": {
            "type": "string"
          },
          "transaction_id": {
            "$ref": "#/components/schemas/TransactionId"
          },
          "input": {
            "type": "string",
            "description": "user input"
          }
        }
      },
      "TranslatedExplanation": {
        "type": "object",
        "required": [
          "language_code",
          "text"
        ],
        "properties": {
          "language_code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 10,
            "description": "ISO 639-1 language code to specify the output language of the content piece.",
            "example": "de"
          },
          "text": {
            "type": "string",
            "description": "Explanation content translated to given language"
          }
        }
      },
      "TranslatedComparable": {
        "type": "object",
        "required": [
          "language_code",
          "text"
        ],
        "properties": {
          "language_code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 10,
            "description": "ISO 639-1 language code to specify the output language of the content piece.",
            "example": "de"
          },
          "text": {
            "type": "string",
            "description": "Comparable content translated to given language"
          }
        }
      },
      "TranslatedContextualInsight": {
        "type": "object",
        "required": [
          "language_code",
          "text"
        ],
        "properties": {
          "language_code": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "TranslatedInsight": {
        "type": "object",
        "required": [
          "language_code",
          "title",
          "text"
        ],
        "properties": {
          "language_code": {
            "type": "string",
            "minLength": 2,
            "maxLength": 10,
            "description": "ISO 639-1 language code to specify the output language of the content piece.",
            "example": "de"
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "example": "Pay attention to this tip when buying online!"
          },
          "text": {
            "type": "string",
            "description": "Insight content translated to given language"
          }
        }
      },
      "DeleteAccountsRequest": {
        "type": "object",
        "required": [
          "account_ids"
        ],
        "properties": {
          "async": {
            "type": "boolean",
            "description": "true, if the request should be processed asynchronously. Default: false"
          },
          "account_ids": {
            "type": "array",
            "description": "a list of account ids",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DeleteAccountsResponse": {
        "type": "object",
        "required": [
          "request_id"
        ],
        "properties": {
          "request_id": {
            "$ref": "#/components/schemas/RequestId"
          }
        }
      },
      "AuthRequest": {
        "type": "object",
        "required": [
          "grant_type",
          "scope"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "client_credentials"
            ],
            "description": "describes the used grant type."
          },
          "scope": {
            "type": "string",
            "enum": [
              "all"
            ]
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "required": [
          "access_token",
          "token_type",
          "expires_in",
          "scope",
          "jti"
        ],
        "properties": {
          "access_token": {
            "type": "string",
            "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpX ...",
            "description": "OAuth 2.0 Access Token"
          },
          "scope": {
            "type": "string",
            "example": "all",
            "description": "Scope of the Access Token"
          },
          "expires_in": {
            "type": "integer",
            "example": 3599,
            "description": "Lifetime of the Access Token in sec."
          },
          "token_type": {
            "type": "string",
            "example": "bearer",
            "description": "Token Type - always bearer"
          },
          "jti": {
            "type": "string",
            "example": "bc415e82-b262-475a-8f03-6c9028bb5991",
            "description": "JWT ID. Can be used to invalidate the Access Token"
          }
        }
      },
      "GetAverageFootprintsResponse": {
        "type": "object",
        "required": [
          "national_average_co2_footprint_in_g"
        ],
        "properties": {
          "national_average_co2_footprint_in_g": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "maximum": 9223372036854776000,
            "description": "Yearly national average CO<sub>2</sub> footprint in grams of the given CO<sub>2</sub> model.",
            "example": 11324583
          },
          "industry_average_co2_footprint_in_g": {
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "maximum": 9223372036854776000,
            "description": "Yearly national average CO<sub>2</sub> footprint in grams of the given CO<sub>2</sub> model and industry of the account. Only returned for commercial banking and if an account ID has been specified.",
            "example": 27462842
          }
        }
      },
      "StructuredFeedbackRequest": {
        "type": "object",
        "description": "Holds information about structured user feedback.",
        "required": [
          "account_id",
          "answer"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "reference": {
            "$ref": "#/components/schemas/FeedbackReference"
          },
          "answer": {
            "type": "object",
            "description": "Holds information about the feedback answer.",
            "required": [
              "answer_id"
            ],
            "properties": {
              "answer_id": {
                "type": "string",
                "description": "ID of a predefined answer to the questions and answers shared by ecolytiq.",
                "example": "0db5d357-6be7-4728-9f3b-80d3fcd815ce"
              },
              "free_text": {
                "type": "string",
                "description": "Free text answer, that was submitted by the user. Can be used to share additional information about the predefined answer referred by the `answer_id`."
              }
            }
          }
        }
      },
      "FeedbackReference": {
        "type": "object",
        "description": "Holds information about what this feedback is referring to. Only one of the fields must be provided. For general feedback about the service, you can omit the complete `reference` object.",
        "properties": {
          "transaction_id": {
            "type": "string",
            "maxLength": 64,
            "description": "ID of a transaction as returned by the transaction API.",
            "example": "928c11b4-afc1-49ae-b0ee-a30d31dd8d5e"
          },
          "insight_id": {
            "type": "string",
            "maxLength": 64,
            "description": "ID of an insight as returned by the content API.",
            "example": "66028aaf-5da0-41db-9bb7-fb7fffe4db1b"
          }
        }
      },
      "UnstructuredFeedbackRequest": {
        "type": "object",
        "description": "Holds information about unstructured user feedback.",
        "required": [
          "account_id",
          "question",
          "answer"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "reference": {
            "$ref": "#/components/schemas/FeedbackReference"
          },
          "question": {
            "type": "string",
            "description": "Free text question.",
            "example": "Would you like to provide additional feedback?"
          },
          "answer": {
            "$ref": "#/components/schemas/CustomFeedbackAnswer"
          }
        }
      },
      "CustomFeedbackAnswer": {
        "type": "object",
        "description": "Holds information about the feedback answer. At least one of the fields must be provided. If `binary_rating` is given, `free_text` can be used to share additional information about the binary rating.",
        "properties": {
          "free_text": {
            "type": "string",
            "description": "Free text answer, that was submitted by the user.",
            "example": "It is too abstract for me. Could you add some examples, to make it more comprehensible?"
          },
          "binary_rating": {
            "type": "string",
            "enum": [
              "POSITIVE",
              "NEGATIVE"
            ],
            "description": "A binary answer option, that can be used e.g. for yes/no, agree/disagree, or like/don't like type of questions.\n"
          }
        }
      },
      "PurchaseCarbonCreditsRequest": {
        "type": "object",
        "required": [
          "account_id",
          "co2_amount_in_g"
        ],
        "properties": {
          "account_id": {
            "description": "The ID of the account holder/user to attribute the purchase to.",
            "type": "string",
            "maxLength": 64,
            "example": "1c974398-4d2b-44fa-b292-64a46c0e6577"
          },
          "co2_amount_in_g": {
            "type": "integer",
            "format": "int64",
            "description": "The amount of CO₂ to retire.",
            "minimum": 1000,
            "maximum": 10000000,
            "example": 2250
          },
          "attribution_month": {
            "description": "The month in which the CO₂ will be offset statistically. \nMonth should be formatted as `YYYY-MM` according to ISO 8601.\nIf absent, the current month, depending on the bank's default timezone, will be used.\n",
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}$",
            "example": "2023-06"
          }
        }
      },
      "PurchaseCarbonCreditsResponse": {
        "type": "object",
        "required": [
          "checkout_url",
          "order_id"
        ],
        "properties": {
          "checkout_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL to redirect the user to Stripe's checkout UI."
          },
          "order_id": {
            "type": "string",
            "description": "Order identifier for the created purchase."
          }
        }
      },
      "CarbonCreditProjectsResponse": {
        "type": "object",
        "required": [
          "projects"
        ],
        "properties": {
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarbonCreditProject"
            }
          }
        }
      },
      "CarbonCreditProjectImage": {
        "type": "object",
        "required": [
          "image_url"
        ],
        "properties": {
          "image_url": {
            "type": "string",
            "format": "url",
            "description": "Url of the project image.",
            "example": "https://example.com/image_01.jpg"
          }
        }
      },
      "CarbonCreditProject": {
        "type": "object",
        "required": [
          "id",
          "country",
          "price_per_kg",
          "translations"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the project.",
            "example": "5c406074-2fe9-4181-83d9-8dcae764a86b"
          },
          "country": {
            "description": "The country where the project is located. ISO 3166 Alpha-2 country code.",
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "example": "US"
          },
          "registry_name": {
            "type": "string",
            "description": "The registry on which the project’s credits are registered.",
            "example": "Puro.earth"
          },
          "classification": {
            "type": "string",
            "description": "The classification of the project’s carbon impact, if applicable.",
            "enum": [
              "AVOIDANCE",
              "REMOVAL",
              "TREE_PLANTING"
            ]
          },
          "images": {
            "type": "array",
            "description": "Images of the project.",
            "items": {
              "$ref": "#/components/schemas/CarbonCreditProjectImage"
            }
          },
          "price_per_kg": {
            "$ref": "#/components/schemas/ActionPositiveAmount"
          },
          "translations": {
            "type": "array",
            "description": "Translated content of the project.",
            "items": {
              "$ref": "#/components/schemas/CarbonCreditProjectTranslation"
            }
          }
        }
      },
      "SustainableDevelopmentGoal": {
        "type": "object",
        "required": [
          "id",
          "description"
        ],
        "properties": {
          "id": {
            "description": "Sustainable Development Goal ID.",
            "type": "string",
            "example": 15
          },
          "description": {
            "type": "string",
            "description": "Description of the SDG.",
            "example": "Protect, restore and promote sustainable use of terrestrial ecosystems, sustainably manage forests, combat desertification, and halt and reverse land degradation and halt biodiversity loss."
          }
        }
      },
      "CarbonCreditProjectTranslation": {
        "type": "object",
        "required": [
          "language_code",
          "title",
          "description",
          "sustainable_development_goals"
        ],
        "properties": {
          "language_code": {
            "type": "string",
            "description": "ISO639-1 two-letter language code.",
            "example": "en"
          },
          "title": {
            "type": "string",
            "description": "The name of the project, as listed in its registry records.",
            "example": "CarbonCapture Direct Air Capture - Project Bison"
          },
          "description": {
            "type": "string",
            "description": "A concise description of the project.",
            "example": "CarbonCapture DAC machines that remove CO2 from the atmosphere. Project Bison will be the first mass-scale DAC deployment to use Class VI wells for CO2 storage, and the world's largest single DAC project."
          },
          "description_long": {
            "type": "string",
            "description": "A detailed description of the project.",
            "example": "Project Bison was designed to permanently remove CO₂ via direct air capture systems in Wyoming, serving to meet the rapidly growing need for high-quality engineered carbon removal credits.\n\nThe project has been developed to be rolled out over multiple phases through 2030. It consists of a partnership between CarbonCapture Inc., a US climate tech company that makes direct air capture (DAC) systems based on a groundbreaking modular open-systems architecture, and Frontier Carbon Solutions, a carbon storage developer. The partnership will deploy CarbonCapture’s DAC modules atop Frontier’s CO2 transportation and storage infrastructure in Wyoming to permanently remove 5 million tonnes of CO2 from the atmosphere annually by 2030.\n\nDAC refers to technology solutions that filter carbon dioxide directly out of the atmosphere. When air moves over certain materials, they selectively bind to CO2. CarbonCapture uses solid sorbent capture materials, themselves typically composed of common chemicals already in use in other applications. Once CO2 is captured from the atmosphere, heat is applied to release it, regenerating capture materials for another capture cycle. CarbonCapture uses only renewables or other zero-carbon resources to power its systems.\n"
          },
          "category": {
            "type": "string",
            "description": "The methodology or technology being applied in the project.",
            "example": "Direct Air Capture"
          },
          "sustainable_development_goals": {
            "type": "array",
            "description": "Lists the UN Sustainable Development Goals (SDGs) that the project claims an impact on. There are 17 goals, described in the [SDGs](https://sdgs.un.org/goals).",
            "items": {
              "$ref": "#/components/schemas/SustainableDevelopmentGoal"
            }
          }
        }
      },
      "ActionPositiveAmount": {
        "description": "Price per kg.",
        "type": "object",
        "required": [
          "value",
          "currency_code"
        ],
        "properties": {
          "value": {
            "description": "Decimal fraction can be between 0 and 10.",
            "type": "number",
            "maximum": 99999.9999999999,
            "minimum": 1e-10,
            "example": 0.0225
          },
          "currency_code": {
            "type": "string",
            "description": "ISO 4217 currency code.",
            "example": "USD"
          }
        }
      },
      "ActionErrorResponse": {
        "description": "Error messages for API clients.",
        "type": "object",
        "required": [
          "error_code",
          "error_description"
        ],
        "properties": {
          "error_code": {
            "type": "string",
            "example": "FORBIDDEN",
            "description": "identifies the type of error. See all used codes in [ecolytiq Error Code Summary](#tag/Errors/ecolytiq-Error-Code-Summary)"
          },
          "error_description": {
            "type": "string",
            "example": "Missing privileges to access projects.",
            "description": "human readable error description"
          }
        }
      }
    },
    "responses": {
      "ActionAccessDeniedResponse": {
        "description": "Forbidden. No access to ecoAction granted.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ActionErrorResponse"
            },
            "examples": {
              "Access denied": {
                "$ref": "#/components/examples/ActionAccessDenied403"
              }
            }
          }
        }
      }
    }
  }
}